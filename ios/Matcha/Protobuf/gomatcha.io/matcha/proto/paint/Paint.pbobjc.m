// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gomatcha.io/matcha/proto/paint/paint.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gomatcha.io/matcha/proto/paint/Paint.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MatchaPaintPBPaintRoot

@implementation MatchaPaintPBPaintRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MatchaPaintPBPaintRoot_FileDescriptor

static GPBFileDescriptor *MatchaPaintPBPaintRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"matcha.paint"
                                                 objcPrefix:@"MatchaPaintPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MatchaPaintPBStyle

@implementation MatchaPaintPBStyle

@dynamic transparency;
@dynamic hasBackgroundColor;
@dynamic backgroundColorRed;
@dynamic backgroundColorGreen;
@dynamic backgroundColorBlue;
@dynamic backgroundColorAlpha;
@dynamic hasBorderColor;
@dynamic borderColorRed;
@dynamic borderColorGreen;
@dynamic borderColorBlue;
@dynamic borderColorAlpha;
@dynamic borderWidth;
@dynamic cornerRadius;
@dynamic shadowRadius;
@dynamic shadowOffsetX;
@dynamic shadowOffsetY;
@dynamic hasShadowColor;
@dynamic shadowColorRed;
@dynamic shadowColorBlue;
@dynamic shadowColorGreen;
@dynamic shadowColorAlpha;

typedef struct MatchaPaintPBStyle__storage_ {
  uint32_t _has_storage_[1];
  uint32_t backgroundColorRed;
  uint32_t backgroundColorGreen;
  uint32_t backgroundColorBlue;
  uint32_t backgroundColorAlpha;
  uint32_t borderColorRed;
  uint32_t borderColorGreen;
  uint32_t borderColorBlue;
  uint32_t borderColorAlpha;
  uint32_t shadowColorRed;
  uint32_t shadowColorBlue;
  uint32_t shadowColorGreen;
  uint32_t shadowColorAlpha;
  double transparency;
  double borderWidth;
  double cornerRadius;
  double shadowRadius;
  double shadowOffsetY;
  double shadowOffsetX;
} MatchaPaintPBStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transparency",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_Transparency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, transparency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "borderWidth",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BorderWidth,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, borderWidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "cornerRadius",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_CornerRadius,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, cornerRadius),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "shadowRadius",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowRadius,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowRadius),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "shadowOffsetY",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowOffsetY,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowOffsetY),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "shadowOffsetX",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowOffsetX,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowOffsetX),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "backgroundColorRed",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BackgroundColorRed,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, backgroundColorRed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "backgroundColorGreen",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BackgroundColorGreen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, backgroundColorGreen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "backgroundColorBlue",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BackgroundColorBlue,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, backgroundColorBlue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "backgroundColorAlpha",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BackgroundColorAlpha,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, backgroundColorAlpha),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasBackgroundColor",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_HasBackgroundColor,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hasBorderColor",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_HasBorderColor,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "borderColorRed",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BorderColorRed,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, borderColorRed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "borderColorGreen",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BorderColorGreen,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, borderColorGreen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "borderColorBlue",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BorderColorBlue,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, borderColorBlue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "borderColorAlpha",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_BorderColorAlpha,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, borderColorAlpha),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasShadowColor",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_HasShadowColor,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "shadowColorRed",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowColorRed,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowColorRed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shadowColorBlue",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowColorBlue,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowColorBlue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shadowColorGreen",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowColorGreen,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowColorGreen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shadowColorAlpha",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPaintPBStyle_FieldNumber_ShadowColorAlpha,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(MatchaPaintPBStyle__storage_, shadowColorAlpha),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPaintPBStyle class]
                                     rootClass:[MatchaPaintPBPaintRoot class]
                                          file:MatchaPaintPBPaintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPaintPBStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\004\013\000\005\014\000\007\014\000\t\r\000\n\r\000\024\022\000\025\024\000\026\023\000\027\024\000\030\022\000\036\016\000\037\016\000 \020\000"
        "!\017\000\"\020\000Z\016\000[\016\000\\\017\000]\020\000^\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
