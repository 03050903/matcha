// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gomatcha.io/matcha/proto/paint/paint.proto

package io.gomatcha.matcha.proto.paint;

public final class PbPaint {
  private PbPaint() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StyleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:matcha.paint.Style)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double transparency = 1;</code>
     */
    double getTransparency();

    /**
     * <code>bool hasBackgroundColor = 24;</code>
     */
    boolean getHasBackgroundColor();

    /**
     * <code>uint32 backgroundColorRed = 20;</code>
     */
    int getBackgroundColorRed();

    /**
     * <code>uint32 backgroundColorGreen = 21;</code>
     */
    int getBackgroundColorGreen();

    /**
     * <code>uint32 backgroundColorBlue = 22;</code>
     */
    int getBackgroundColorBlue();

    /**
     * <code>uint32 backgroundColorAlpha = 23;</code>
     */
    int getBackgroundColorAlpha();

    /**
     * <code>bool hasBorderColor = 30;</code>
     */
    boolean getHasBorderColor();

    /**
     * <code>uint32 borderColorRed = 31;</code>
     */
    int getBorderColorRed();

    /**
     * <code>uint32 borderColorGreen = 32;</code>
     */
    int getBorderColorGreen();

    /**
     * <code>uint32 borderColorBlue = 33;</code>
     */
    int getBorderColorBlue();

    /**
     * <code>uint32 borderColorAlpha = 34;</code>
     */
    int getBorderColorAlpha();

    /**
     * <code>double borderWidth = 4;</code>
     */
    double getBorderWidth();

    /**
     * <code>double cornerRadius = 5;</code>
     */
    double getCornerRadius();

    /**
     * <code>double shadowRadius = 7;</code>
     */
    double getShadowRadius();

    /**
     * <code>double shadowOffsetX = 10;</code>
     */
    double getShadowOffsetX();

    /**
     * <pre>
     * matcha.layout.Point shadowOffset = 8;
     * </pre>
     *
     * <code>double shadowOffsetY = 9;</code>
     */
    double getShadowOffsetY();

    /**
     * <code>bool hasShadowColor = 90;</code>
     */
    boolean getHasShadowColor();

    /**
     * <code>uint32 shadowColorRed = 91;</code>
     */
    int getShadowColorRed();

    /**
     * <code>uint32 shadowColorBlue = 92;</code>
     */
    int getShadowColorBlue();

    /**
     * <code>uint32 shadowColorGreen = 93;</code>
     */
    int getShadowColorGreen();

    /**
     * <code>uint32 shadowColorAlpha = 94;</code>
     */
    int getShadowColorAlpha();
  }
  /**
   * Protobuf type {@code matcha.paint.Style}
   */
  public  static final class Style extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:matcha.paint.Style)
      StyleOrBuilder {
    // Use Style.newBuilder() to construct.
    private Style(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Style() {
      transparency_ = 0D;
      hasBackgroundColor_ = false;
      backgroundColorRed_ = 0;
      backgroundColorGreen_ = 0;
      backgroundColorBlue_ = 0;
      backgroundColorAlpha_ = 0;
      hasBorderColor_ = false;
      borderColorRed_ = 0;
      borderColorGreen_ = 0;
      borderColorBlue_ = 0;
      borderColorAlpha_ = 0;
      borderWidth_ = 0D;
      cornerRadius_ = 0D;
      shadowRadius_ = 0D;
      shadowOffsetX_ = 0D;
      shadowOffsetY_ = 0D;
      hasShadowColor_ = false;
      shadowColorRed_ = 0;
      shadowColorBlue_ = 0;
      shadowColorGreen_ = 0;
      shadowColorAlpha_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Style(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {

              transparency_ = input.readDouble();
              break;
            }
            case 33: {

              borderWidth_ = input.readDouble();
              break;
            }
            case 41: {

              cornerRadius_ = input.readDouble();
              break;
            }
            case 57: {

              shadowRadius_ = input.readDouble();
              break;
            }
            case 73: {

              shadowOffsetY_ = input.readDouble();
              break;
            }
            case 81: {

              shadowOffsetX_ = input.readDouble();
              break;
            }
            case 160: {

              backgroundColorRed_ = input.readUInt32();
              break;
            }
            case 168: {

              backgroundColorGreen_ = input.readUInt32();
              break;
            }
            case 176: {

              backgroundColorBlue_ = input.readUInt32();
              break;
            }
            case 184: {

              backgroundColorAlpha_ = input.readUInt32();
              break;
            }
            case 192: {

              hasBackgroundColor_ = input.readBool();
              break;
            }
            case 240: {

              hasBorderColor_ = input.readBool();
              break;
            }
            case 248: {

              borderColorRed_ = input.readUInt32();
              break;
            }
            case 256: {

              borderColorGreen_ = input.readUInt32();
              break;
            }
            case 264: {

              borderColorBlue_ = input.readUInt32();
              break;
            }
            case 272: {

              borderColorAlpha_ = input.readUInt32();
              break;
            }
            case 720: {

              hasShadowColor_ = input.readBool();
              break;
            }
            case 728: {

              shadowColorRed_ = input.readUInt32();
              break;
            }
            case 736: {

              shadowColorBlue_ = input.readUInt32();
              break;
            }
            case 744: {

              shadowColorGreen_ = input.readUInt32();
              break;
            }
            case 752: {

              shadowColorAlpha_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.gomatcha.matcha.proto.paint.PbPaint.internal_static_matcha_paint_Style_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.gomatcha.matcha.proto.paint.PbPaint.internal_static_matcha_paint_Style_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.gomatcha.matcha.proto.paint.PbPaint.Style.class, io.gomatcha.matcha.proto.paint.PbPaint.Style.Builder.class);
    }

    public static final int TRANSPARENCY_FIELD_NUMBER = 1;
    private double transparency_;
    /**
     * <code>double transparency = 1;</code>
     */
    public double getTransparency() {
      return transparency_;
    }

    public static final int HASBACKGROUNDCOLOR_FIELD_NUMBER = 24;
    private boolean hasBackgroundColor_;
    /**
     * <code>bool hasBackgroundColor = 24;</code>
     */
    public boolean getHasBackgroundColor() {
      return hasBackgroundColor_;
    }

    public static final int BACKGROUNDCOLORRED_FIELD_NUMBER = 20;
    private int backgroundColorRed_;
    /**
     * <code>uint32 backgroundColorRed = 20;</code>
     */
    public int getBackgroundColorRed() {
      return backgroundColorRed_;
    }

    public static final int BACKGROUNDCOLORGREEN_FIELD_NUMBER = 21;
    private int backgroundColorGreen_;
    /**
     * <code>uint32 backgroundColorGreen = 21;</code>
     */
    public int getBackgroundColorGreen() {
      return backgroundColorGreen_;
    }

    public static final int BACKGROUNDCOLORBLUE_FIELD_NUMBER = 22;
    private int backgroundColorBlue_;
    /**
     * <code>uint32 backgroundColorBlue = 22;</code>
     */
    public int getBackgroundColorBlue() {
      return backgroundColorBlue_;
    }

    public static final int BACKGROUNDCOLORALPHA_FIELD_NUMBER = 23;
    private int backgroundColorAlpha_;
    /**
     * <code>uint32 backgroundColorAlpha = 23;</code>
     */
    public int getBackgroundColorAlpha() {
      return backgroundColorAlpha_;
    }

    public static final int HASBORDERCOLOR_FIELD_NUMBER = 30;
    private boolean hasBorderColor_;
    /**
     * <code>bool hasBorderColor = 30;</code>
     */
    public boolean getHasBorderColor() {
      return hasBorderColor_;
    }

    public static final int BORDERCOLORRED_FIELD_NUMBER = 31;
    private int borderColorRed_;
    /**
     * <code>uint32 borderColorRed = 31;</code>
     */
    public int getBorderColorRed() {
      return borderColorRed_;
    }

    public static final int BORDERCOLORGREEN_FIELD_NUMBER = 32;
    private int borderColorGreen_;
    /**
     * <code>uint32 borderColorGreen = 32;</code>
     */
    public int getBorderColorGreen() {
      return borderColorGreen_;
    }

    public static final int BORDERCOLORBLUE_FIELD_NUMBER = 33;
    private int borderColorBlue_;
    /**
     * <code>uint32 borderColorBlue = 33;</code>
     */
    public int getBorderColorBlue() {
      return borderColorBlue_;
    }

    public static final int BORDERCOLORALPHA_FIELD_NUMBER = 34;
    private int borderColorAlpha_;
    /**
     * <code>uint32 borderColorAlpha = 34;</code>
     */
    public int getBorderColorAlpha() {
      return borderColorAlpha_;
    }

    public static final int BORDERWIDTH_FIELD_NUMBER = 4;
    private double borderWidth_;
    /**
     * <code>double borderWidth = 4;</code>
     */
    public double getBorderWidth() {
      return borderWidth_;
    }

    public static final int CORNERRADIUS_FIELD_NUMBER = 5;
    private double cornerRadius_;
    /**
     * <code>double cornerRadius = 5;</code>
     */
    public double getCornerRadius() {
      return cornerRadius_;
    }

    public static final int SHADOWRADIUS_FIELD_NUMBER = 7;
    private double shadowRadius_;
    /**
     * <code>double shadowRadius = 7;</code>
     */
    public double getShadowRadius() {
      return shadowRadius_;
    }

    public static final int SHADOWOFFSETX_FIELD_NUMBER = 10;
    private double shadowOffsetX_;
    /**
     * <code>double shadowOffsetX = 10;</code>
     */
    public double getShadowOffsetX() {
      return shadowOffsetX_;
    }

    public static final int SHADOWOFFSETY_FIELD_NUMBER = 9;
    private double shadowOffsetY_;
    /**
     * <pre>
     * matcha.layout.Point shadowOffset = 8;
     * </pre>
     *
     * <code>double shadowOffsetY = 9;</code>
     */
    public double getShadowOffsetY() {
      return shadowOffsetY_;
    }

    public static final int HASSHADOWCOLOR_FIELD_NUMBER = 90;
    private boolean hasShadowColor_;
    /**
     * <code>bool hasShadowColor = 90;</code>
     */
    public boolean getHasShadowColor() {
      return hasShadowColor_;
    }

    public static final int SHADOWCOLORRED_FIELD_NUMBER = 91;
    private int shadowColorRed_;
    /**
     * <code>uint32 shadowColorRed = 91;</code>
     */
    public int getShadowColorRed() {
      return shadowColorRed_;
    }

    public static final int SHADOWCOLORBLUE_FIELD_NUMBER = 92;
    private int shadowColorBlue_;
    /**
     * <code>uint32 shadowColorBlue = 92;</code>
     */
    public int getShadowColorBlue() {
      return shadowColorBlue_;
    }

    public static final int SHADOWCOLORGREEN_FIELD_NUMBER = 93;
    private int shadowColorGreen_;
    /**
     * <code>uint32 shadowColorGreen = 93;</code>
     */
    public int getShadowColorGreen() {
      return shadowColorGreen_;
    }

    public static final int SHADOWCOLORALPHA_FIELD_NUMBER = 94;
    private int shadowColorAlpha_;
    /**
     * <code>uint32 shadowColorAlpha = 94;</code>
     */
    public int getShadowColorAlpha() {
      return shadowColorAlpha_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (transparency_ != 0D) {
        output.writeDouble(1, transparency_);
      }
      if (borderWidth_ != 0D) {
        output.writeDouble(4, borderWidth_);
      }
      if (cornerRadius_ != 0D) {
        output.writeDouble(5, cornerRadius_);
      }
      if (shadowRadius_ != 0D) {
        output.writeDouble(7, shadowRadius_);
      }
      if (shadowOffsetY_ != 0D) {
        output.writeDouble(9, shadowOffsetY_);
      }
      if (shadowOffsetX_ != 0D) {
        output.writeDouble(10, shadowOffsetX_);
      }
      if (backgroundColorRed_ != 0) {
        output.writeUInt32(20, backgroundColorRed_);
      }
      if (backgroundColorGreen_ != 0) {
        output.writeUInt32(21, backgroundColorGreen_);
      }
      if (backgroundColorBlue_ != 0) {
        output.writeUInt32(22, backgroundColorBlue_);
      }
      if (backgroundColorAlpha_ != 0) {
        output.writeUInt32(23, backgroundColorAlpha_);
      }
      if (hasBackgroundColor_ != false) {
        output.writeBool(24, hasBackgroundColor_);
      }
      if (hasBorderColor_ != false) {
        output.writeBool(30, hasBorderColor_);
      }
      if (borderColorRed_ != 0) {
        output.writeUInt32(31, borderColorRed_);
      }
      if (borderColorGreen_ != 0) {
        output.writeUInt32(32, borderColorGreen_);
      }
      if (borderColorBlue_ != 0) {
        output.writeUInt32(33, borderColorBlue_);
      }
      if (borderColorAlpha_ != 0) {
        output.writeUInt32(34, borderColorAlpha_);
      }
      if (hasShadowColor_ != false) {
        output.writeBool(90, hasShadowColor_);
      }
      if (shadowColorRed_ != 0) {
        output.writeUInt32(91, shadowColorRed_);
      }
      if (shadowColorBlue_ != 0) {
        output.writeUInt32(92, shadowColorBlue_);
      }
      if (shadowColorGreen_ != 0) {
        output.writeUInt32(93, shadowColorGreen_);
      }
      if (shadowColorAlpha_ != 0) {
        output.writeUInt32(94, shadowColorAlpha_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (transparency_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, transparency_);
      }
      if (borderWidth_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, borderWidth_);
      }
      if (cornerRadius_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, cornerRadius_);
      }
      if (shadowRadius_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, shadowRadius_);
      }
      if (shadowOffsetY_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, shadowOffsetY_);
      }
      if (shadowOffsetX_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, shadowOffsetX_);
      }
      if (backgroundColorRed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, backgroundColorRed_);
      }
      if (backgroundColorGreen_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, backgroundColorGreen_);
      }
      if (backgroundColorBlue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, backgroundColorBlue_);
      }
      if (backgroundColorAlpha_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, backgroundColorAlpha_);
      }
      if (hasBackgroundColor_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, hasBackgroundColor_);
      }
      if (hasBorderColor_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(30, hasBorderColor_);
      }
      if (borderColorRed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, borderColorRed_);
      }
      if (borderColorGreen_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, borderColorGreen_);
      }
      if (borderColorBlue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, borderColorBlue_);
      }
      if (borderColorAlpha_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(34, borderColorAlpha_);
      }
      if (hasShadowColor_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(90, hasShadowColor_);
      }
      if (shadowColorRed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(91, shadowColorRed_);
      }
      if (shadowColorBlue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(92, shadowColorBlue_);
      }
      if (shadowColorGreen_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(93, shadowColorGreen_);
      }
      if (shadowColorAlpha_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(94, shadowColorAlpha_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.gomatcha.matcha.proto.paint.PbPaint.Style)) {
        return super.equals(obj);
      }
      io.gomatcha.matcha.proto.paint.PbPaint.Style other = (io.gomatcha.matcha.proto.paint.PbPaint.Style) obj;

      boolean result = true;
      result = result && (
          java.lang.Double.doubleToLongBits(getTransparency())
          == java.lang.Double.doubleToLongBits(
              other.getTransparency()));
      result = result && (getHasBackgroundColor()
          == other.getHasBackgroundColor());
      result = result && (getBackgroundColorRed()
          == other.getBackgroundColorRed());
      result = result && (getBackgroundColorGreen()
          == other.getBackgroundColorGreen());
      result = result && (getBackgroundColorBlue()
          == other.getBackgroundColorBlue());
      result = result && (getBackgroundColorAlpha()
          == other.getBackgroundColorAlpha());
      result = result && (getHasBorderColor()
          == other.getHasBorderColor());
      result = result && (getBorderColorRed()
          == other.getBorderColorRed());
      result = result && (getBorderColorGreen()
          == other.getBorderColorGreen());
      result = result && (getBorderColorBlue()
          == other.getBorderColorBlue());
      result = result && (getBorderColorAlpha()
          == other.getBorderColorAlpha());
      result = result && (
          java.lang.Double.doubleToLongBits(getBorderWidth())
          == java.lang.Double.doubleToLongBits(
              other.getBorderWidth()));
      result = result && (
          java.lang.Double.doubleToLongBits(getCornerRadius())
          == java.lang.Double.doubleToLongBits(
              other.getCornerRadius()));
      result = result && (
          java.lang.Double.doubleToLongBits(getShadowRadius())
          == java.lang.Double.doubleToLongBits(
              other.getShadowRadius()));
      result = result && (
          java.lang.Double.doubleToLongBits(getShadowOffsetX())
          == java.lang.Double.doubleToLongBits(
              other.getShadowOffsetX()));
      result = result && (
          java.lang.Double.doubleToLongBits(getShadowOffsetY())
          == java.lang.Double.doubleToLongBits(
              other.getShadowOffsetY()));
      result = result && (getHasShadowColor()
          == other.getHasShadowColor());
      result = result && (getShadowColorRed()
          == other.getShadowColorRed());
      result = result && (getShadowColorBlue()
          == other.getShadowColorBlue());
      result = result && (getShadowColorGreen()
          == other.getShadowColorGreen());
      result = result && (getShadowColorAlpha()
          == other.getShadowColorAlpha());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSPARENCY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getTransparency()));
      hash = (37 * hash) + HASBACKGROUNDCOLOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasBackgroundColor());
      hash = (37 * hash) + BACKGROUNDCOLORRED_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColorRed();
      hash = (37 * hash) + BACKGROUNDCOLORGREEN_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColorGreen();
      hash = (37 * hash) + BACKGROUNDCOLORBLUE_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColorBlue();
      hash = (37 * hash) + BACKGROUNDCOLORALPHA_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColorAlpha();
      hash = (37 * hash) + HASBORDERCOLOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasBorderColor());
      hash = (37 * hash) + BORDERCOLORRED_FIELD_NUMBER;
      hash = (53 * hash) + getBorderColorRed();
      hash = (37 * hash) + BORDERCOLORGREEN_FIELD_NUMBER;
      hash = (53 * hash) + getBorderColorGreen();
      hash = (37 * hash) + BORDERCOLORBLUE_FIELD_NUMBER;
      hash = (53 * hash) + getBorderColorBlue();
      hash = (37 * hash) + BORDERCOLORALPHA_FIELD_NUMBER;
      hash = (53 * hash) + getBorderColorAlpha();
      hash = (37 * hash) + BORDERWIDTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBorderWidth()));
      hash = (37 * hash) + CORNERRADIUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCornerRadius()));
      hash = (37 * hash) + SHADOWRADIUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getShadowRadius()));
      hash = (37 * hash) + SHADOWOFFSETX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getShadowOffsetX()));
      hash = (37 * hash) + SHADOWOFFSETY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getShadowOffsetY()));
      hash = (37 * hash) + HASSHADOWCOLOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasShadowColor());
      hash = (37 * hash) + SHADOWCOLORRED_FIELD_NUMBER;
      hash = (53 * hash) + getShadowColorRed();
      hash = (37 * hash) + SHADOWCOLORBLUE_FIELD_NUMBER;
      hash = (53 * hash) + getShadowColorBlue();
      hash = (37 * hash) + SHADOWCOLORGREEN_FIELD_NUMBER;
      hash = (53 * hash) + getShadowColorGreen();
      hash = (37 * hash) + SHADOWCOLORALPHA_FIELD_NUMBER;
      hash = (53 * hash) + getShadowColorAlpha();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.gomatcha.matcha.proto.paint.PbPaint.Style parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.gomatcha.matcha.proto.paint.PbPaint.Style prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code matcha.paint.Style}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:matcha.paint.Style)
        io.gomatcha.matcha.proto.paint.PbPaint.StyleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.gomatcha.matcha.proto.paint.PbPaint.internal_static_matcha_paint_Style_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.gomatcha.matcha.proto.paint.PbPaint.internal_static_matcha_paint_Style_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.gomatcha.matcha.proto.paint.PbPaint.Style.class, io.gomatcha.matcha.proto.paint.PbPaint.Style.Builder.class);
      }

      // Construct using io.gomatcha.matcha.proto.paint.PbPaint.Style.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        transparency_ = 0D;

        hasBackgroundColor_ = false;

        backgroundColorRed_ = 0;

        backgroundColorGreen_ = 0;

        backgroundColorBlue_ = 0;

        backgroundColorAlpha_ = 0;

        hasBorderColor_ = false;

        borderColorRed_ = 0;

        borderColorGreen_ = 0;

        borderColorBlue_ = 0;

        borderColorAlpha_ = 0;

        borderWidth_ = 0D;

        cornerRadius_ = 0D;

        shadowRadius_ = 0D;

        shadowOffsetX_ = 0D;

        shadowOffsetY_ = 0D;

        hasShadowColor_ = false;

        shadowColorRed_ = 0;

        shadowColorBlue_ = 0;

        shadowColorGreen_ = 0;

        shadowColorAlpha_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.gomatcha.matcha.proto.paint.PbPaint.internal_static_matcha_paint_Style_descriptor;
      }

      public io.gomatcha.matcha.proto.paint.PbPaint.Style getDefaultInstanceForType() {
        return io.gomatcha.matcha.proto.paint.PbPaint.Style.getDefaultInstance();
      }

      public io.gomatcha.matcha.proto.paint.PbPaint.Style build() {
        io.gomatcha.matcha.proto.paint.PbPaint.Style result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.gomatcha.matcha.proto.paint.PbPaint.Style buildPartial() {
        io.gomatcha.matcha.proto.paint.PbPaint.Style result = new io.gomatcha.matcha.proto.paint.PbPaint.Style(this);
        result.transparency_ = transparency_;
        result.hasBackgroundColor_ = hasBackgroundColor_;
        result.backgroundColorRed_ = backgroundColorRed_;
        result.backgroundColorGreen_ = backgroundColorGreen_;
        result.backgroundColorBlue_ = backgroundColorBlue_;
        result.backgroundColorAlpha_ = backgroundColorAlpha_;
        result.hasBorderColor_ = hasBorderColor_;
        result.borderColorRed_ = borderColorRed_;
        result.borderColorGreen_ = borderColorGreen_;
        result.borderColorBlue_ = borderColorBlue_;
        result.borderColorAlpha_ = borderColorAlpha_;
        result.borderWidth_ = borderWidth_;
        result.cornerRadius_ = cornerRadius_;
        result.shadowRadius_ = shadowRadius_;
        result.shadowOffsetX_ = shadowOffsetX_;
        result.shadowOffsetY_ = shadowOffsetY_;
        result.hasShadowColor_ = hasShadowColor_;
        result.shadowColorRed_ = shadowColorRed_;
        result.shadowColorBlue_ = shadowColorBlue_;
        result.shadowColorGreen_ = shadowColorGreen_;
        result.shadowColorAlpha_ = shadowColorAlpha_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.gomatcha.matcha.proto.paint.PbPaint.Style) {
          return mergeFrom((io.gomatcha.matcha.proto.paint.PbPaint.Style)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.gomatcha.matcha.proto.paint.PbPaint.Style other) {
        if (other == io.gomatcha.matcha.proto.paint.PbPaint.Style.getDefaultInstance()) return this;
        if (other.getTransparency() != 0D) {
          setTransparency(other.getTransparency());
        }
        if (other.getHasBackgroundColor() != false) {
          setHasBackgroundColor(other.getHasBackgroundColor());
        }
        if (other.getBackgroundColorRed() != 0) {
          setBackgroundColorRed(other.getBackgroundColorRed());
        }
        if (other.getBackgroundColorGreen() != 0) {
          setBackgroundColorGreen(other.getBackgroundColorGreen());
        }
        if (other.getBackgroundColorBlue() != 0) {
          setBackgroundColorBlue(other.getBackgroundColorBlue());
        }
        if (other.getBackgroundColorAlpha() != 0) {
          setBackgroundColorAlpha(other.getBackgroundColorAlpha());
        }
        if (other.getHasBorderColor() != false) {
          setHasBorderColor(other.getHasBorderColor());
        }
        if (other.getBorderColorRed() != 0) {
          setBorderColorRed(other.getBorderColorRed());
        }
        if (other.getBorderColorGreen() != 0) {
          setBorderColorGreen(other.getBorderColorGreen());
        }
        if (other.getBorderColorBlue() != 0) {
          setBorderColorBlue(other.getBorderColorBlue());
        }
        if (other.getBorderColorAlpha() != 0) {
          setBorderColorAlpha(other.getBorderColorAlpha());
        }
        if (other.getBorderWidth() != 0D) {
          setBorderWidth(other.getBorderWidth());
        }
        if (other.getCornerRadius() != 0D) {
          setCornerRadius(other.getCornerRadius());
        }
        if (other.getShadowRadius() != 0D) {
          setShadowRadius(other.getShadowRadius());
        }
        if (other.getShadowOffsetX() != 0D) {
          setShadowOffsetX(other.getShadowOffsetX());
        }
        if (other.getShadowOffsetY() != 0D) {
          setShadowOffsetY(other.getShadowOffsetY());
        }
        if (other.getHasShadowColor() != false) {
          setHasShadowColor(other.getHasShadowColor());
        }
        if (other.getShadowColorRed() != 0) {
          setShadowColorRed(other.getShadowColorRed());
        }
        if (other.getShadowColorBlue() != 0) {
          setShadowColorBlue(other.getShadowColorBlue());
        }
        if (other.getShadowColorGreen() != 0) {
          setShadowColorGreen(other.getShadowColorGreen());
        }
        if (other.getShadowColorAlpha() != 0) {
          setShadowColorAlpha(other.getShadowColorAlpha());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.gomatcha.matcha.proto.paint.PbPaint.Style parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.gomatcha.matcha.proto.paint.PbPaint.Style) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double transparency_ ;
      /**
       * <code>double transparency = 1;</code>
       */
      public double getTransparency() {
        return transparency_;
      }
      /**
       * <code>double transparency = 1;</code>
       */
      public Builder setTransparency(double value) {
        
        transparency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double transparency = 1;</code>
       */
      public Builder clearTransparency() {
        
        transparency_ = 0D;
        onChanged();
        return this;
      }

      private boolean hasBackgroundColor_ ;
      /**
       * <code>bool hasBackgroundColor = 24;</code>
       */
      public boolean getHasBackgroundColor() {
        return hasBackgroundColor_;
      }
      /**
       * <code>bool hasBackgroundColor = 24;</code>
       */
      public Builder setHasBackgroundColor(boolean value) {
        
        hasBackgroundColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool hasBackgroundColor = 24;</code>
       */
      public Builder clearHasBackgroundColor() {
        
        hasBackgroundColor_ = false;
        onChanged();
        return this;
      }

      private int backgroundColorRed_ ;
      /**
       * <code>uint32 backgroundColorRed = 20;</code>
       */
      public int getBackgroundColorRed() {
        return backgroundColorRed_;
      }
      /**
       * <code>uint32 backgroundColorRed = 20;</code>
       */
      public Builder setBackgroundColorRed(int value) {
        
        backgroundColorRed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 backgroundColorRed = 20;</code>
       */
      public Builder clearBackgroundColorRed() {
        
        backgroundColorRed_ = 0;
        onChanged();
        return this;
      }

      private int backgroundColorGreen_ ;
      /**
       * <code>uint32 backgroundColorGreen = 21;</code>
       */
      public int getBackgroundColorGreen() {
        return backgroundColorGreen_;
      }
      /**
       * <code>uint32 backgroundColorGreen = 21;</code>
       */
      public Builder setBackgroundColorGreen(int value) {
        
        backgroundColorGreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 backgroundColorGreen = 21;</code>
       */
      public Builder clearBackgroundColorGreen() {
        
        backgroundColorGreen_ = 0;
        onChanged();
        return this;
      }

      private int backgroundColorBlue_ ;
      /**
       * <code>uint32 backgroundColorBlue = 22;</code>
       */
      public int getBackgroundColorBlue() {
        return backgroundColorBlue_;
      }
      /**
       * <code>uint32 backgroundColorBlue = 22;</code>
       */
      public Builder setBackgroundColorBlue(int value) {
        
        backgroundColorBlue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 backgroundColorBlue = 22;</code>
       */
      public Builder clearBackgroundColorBlue() {
        
        backgroundColorBlue_ = 0;
        onChanged();
        return this;
      }

      private int backgroundColorAlpha_ ;
      /**
       * <code>uint32 backgroundColorAlpha = 23;</code>
       */
      public int getBackgroundColorAlpha() {
        return backgroundColorAlpha_;
      }
      /**
       * <code>uint32 backgroundColorAlpha = 23;</code>
       */
      public Builder setBackgroundColorAlpha(int value) {
        
        backgroundColorAlpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 backgroundColorAlpha = 23;</code>
       */
      public Builder clearBackgroundColorAlpha() {
        
        backgroundColorAlpha_ = 0;
        onChanged();
        return this;
      }

      private boolean hasBorderColor_ ;
      /**
       * <code>bool hasBorderColor = 30;</code>
       */
      public boolean getHasBorderColor() {
        return hasBorderColor_;
      }
      /**
       * <code>bool hasBorderColor = 30;</code>
       */
      public Builder setHasBorderColor(boolean value) {
        
        hasBorderColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool hasBorderColor = 30;</code>
       */
      public Builder clearHasBorderColor() {
        
        hasBorderColor_ = false;
        onChanged();
        return this;
      }

      private int borderColorRed_ ;
      /**
       * <code>uint32 borderColorRed = 31;</code>
       */
      public int getBorderColorRed() {
        return borderColorRed_;
      }
      /**
       * <code>uint32 borderColorRed = 31;</code>
       */
      public Builder setBorderColorRed(int value) {
        
        borderColorRed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 borderColorRed = 31;</code>
       */
      public Builder clearBorderColorRed() {
        
        borderColorRed_ = 0;
        onChanged();
        return this;
      }

      private int borderColorGreen_ ;
      /**
       * <code>uint32 borderColorGreen = 32;</code>
       */
      public int getBorderColorGreen() {
        return borderColorGreen_;
      }
      /**
       * <code>uint32 borderColorGreen = 32;</code>
       */
      public Builder setBorderColorGreen(int value) {
        
        borderColorGreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 borderColorGreen = 32;</code>
       */
      public Builder clearBorderColorGreen() {
        
        borderColorGreen_ = 0;
        onChanged();
        return this;
      }

      private int borderColorBlue_ ;
      /**
       * <code>uint32 borderColorBlue = 33;</code>
       */
      public int getBorderColorBlue() {
        return borderColorBlue_;
      }
      /**
       * <code>uint32 borderColorBlue = 33;</code>
       */
      public Builder setBorderColorBlue(int value) {
        
        borderColorBlue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 borderColorBlue = 33;</code>
       */
      public Builder clearBorderColorBlue() {
        
        borderColorBlue_ = 0;
        onChanged();
        return this;
      }

      private int borderColorAlpha_ ;
      /**
       * <code>uint32 borderColorAlpha = 34;</code>
       */
      public int getBorderColorAlpha() {
        return borderColorAlpha_;
      }
      /**
       * <code>uint32 borderColorAlpha = 34;</code>
       */
      public Builder setBorderColorAlpha(int value) {
        
        borderColorAlpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 borderColorAlpha = 34;</code>
       */
      public Builder clearBorderColorAlpha() {
        
        borderColorAlpha_ = 0;
        onChanged();
        return this;
      }

      private double borderWidth_ ;
      /**
       * <code>double borderWidth = 4;</code>
       */
      public double getBorderWidth() {
        return borderWidth_;
      }
      /**
       * <code>double borderWidth = 4;</code>
       */
      public Builder setBorderWidth(double value) {
        
        borderWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double borderWidth = 4;</code>
       */
      public Builder clearBorderWidth() {
        
        borderWidth_ = 0D;
        onChanged();
        return this;
      }

      private double cornerRadius_ ;
      /**
       * <code>double cornerRadius = 5;</code>
       */
      public double getCornerRadius() {
        return cornerRadius_;
      }
      /**
       * <code>double cornerRadius = 5;</code>
       */
      public Builder setCornerRadius(double value) {
        
        cornerRadius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double cornerRadius = 5;</code>
       */
      public Builder clearCornerRadius() {
        
        cornerRadius_ = 0D;
        onChanged();
        return this;
      }

      private double shadowRadius_ ;
      /**
       * <code>double shadowRadius = 7;</code>
       */
      public double getShadowRadius() {
        return shadowRadius_;
      }
      /**
       * <code>double shadowRadius = 7;</code>
       */
      public Builder setShadowRadius(double value) {
        
        shadowRadius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double shadowRadius = 7;</code>
       */
      public Builder clearShadowRadius() {
        
        shadowRadius_ = 0D;
        onChanged();
        return this;
      }

      private double shadowOffsetX_ ;
      /**
       * <code>double shadowOffsetX = 10;</code>
       */
      public double getShadowOffsetX() {
        return shadowOffsetX_;
      }
      /**
       * <code>double shadowOffsetX = 10;</code>
       */
      public Builder setShadowOffsetX(double value) {
        
        shadowOffsetX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double shadowOffsetX = 10;</code>
       */
      public Builder clearShadowOffsetX() {
        
        shadowOffsetX_ = 0D;
        onChanged();
        return this;
      }

      private double shadowOffsetY_ ;
      /**
       * <pre>
       * matcha.layout.Point shadowOffset = 8;
       * </pre>
       *
       * <code>double shadowOffsetY = 9;</code>
       */
      public double getShadowOffsetY() {
        return shadowOffsetY_;
      }
      /**
       * <pre>
       * matcha.layout.Point shadowOffset = 8;
       * </pre>
       *
       * <code>double shadowOffsetY = 9;</code>
       */
      public Builder setShadowOffsetY(double value) {
        
        shadowOffsetY_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * matcha.layout.Point shadowOffset = 8;
       * </pre>
       *
       * <code>double shadowOffsetY = 9;</code>
       */
      public Builder clearShadowOffsetY() {
        
        shadowOffsetY_ = 0D;
        onChanged();
        return this;
      }

      private boolean hasShadowColor_ ;
      /**
       * <code>bool hasShadowColor = 90;</code>
       */
      public boolean getHasShadowColor() {
        return hasShadowColor_;
      }
      /**
       * <code>bool hasShadowColor = 90;</code>
       */
      public Builder setHasShadowColor(boolean value) {
        
        hasShadowColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool hasShadowColor = 90;</code>
       */
      public Builder clearHasShadowColor() {
        
        hasShadowColor_ = false;
        onChanged();
        return this;
      }

      private int shadowColorRed_ ;
      /**
       * <code>uint32 shadowColorRed = 91;</code>
       */
      public int getShadowColorRed() {
        return shadowColorRed_;
      }
      /**
       * <code>uint32 shadowColorRed = 91;</code>
       */
      public Builder setShadowColorRed(int value) {
        
        shadowColorRed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shadowColorRed = 91;</code>
       */
      public Builder clearShadowColorRed() {
        
        shadowColorRed_ = 0;
        onChanged();
        return this;
      }

      private int shadowColorBlue_ ;
      /**
       * <code>uint32 shadowColorBlue = 92;</code>
       */
      public int getShadowColorBlue() {
        return shadowColorBlue_;
      }
      /**
       * <code>uint32 shadowColorBlue = 92;</code>
       */
      public Builder setShadowColorBlue(int value) {
        
        shadowColorBlue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shadowColorBlue = 92;</code>
       */
      public Builder clearShadowColorBlue() {
        
        shadowColorBlue_ = 0;
        onChanged();
        return this;
      }

      private int shadowColorGreen_ ;
      /**
       * <code>uint32 shadowColorGreen = 93;</code>
       */
      public int getShadowColorGreen() {
        return shadowColorGreen_;
      }
      /**
       * <code>uint32 shadowColorGreen = 93;</code>
       */
      public Builder setShadowColorGreen(int value) {
        
        shadowColorGreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shadowColorGreen = 93;</code>
       */
      public Builder clearShadowColorGreen() {
        
        shadowColorGreen_ = 0;
        onChanged();
        return this;
      }

      private int shadowColorAlpha_ ;
      /**
       * <code>uint32 shadowColorAlpha = 94;</code>
       */
      public int getShadowColorAlpha() {
        return shadowColorAlpha_;
      }
      /**
       * <code>uint32 shadowColorAlpha = 94;</code>
       */
      public Builder setShadowColorAlpha(int value) {
        
        shadowColorAlpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shadowColorAlpha = 94;</code>
       */
      public Builder clearShadowColorAlpha() {
        
        shadowColorAlpha_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:matcha.paint.Style)
    }

    // @@protoc_insertion_point(class_scope:matcha.paint.Style)
    private static final io.gomatcha.matcha.proto.paint.PbPaint.Style DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.gomatcha.matcha.proto.paint.PbPaint.Style();
    }

    public static io.gomatcha.matcha.proto.paint.PbPaint.Style getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Style>
        PARSER = new com.google.protobuf.AbstractParser<Style>() {
      public Style parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Style(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Style> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Style> getParserForType() {
      return PARSER;
    }

    public io.gomatcha.matcha.proto.paint.PbPaint.Style getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_matcha_paint_Style_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_matcha_paint_Style_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*gomatcha.io/matcha/proto/paint/paint.p" +
      "roto\022\014matcha.paint\"\227\004\n\005Style\022\024\n\014transpar" +
      "ency\030\001 \001(\001\022\032\n\022hasBackgroundColor\030\030 \001(\010\022\032" +
      "\n\022backgroundColorRed\030\024 \001(\r\022\034\n\024background" +
      "ColorGreen\030\025 \001(\r\022\033\n\023backgroundColorBlue\030" +
      "\026 \001(\r\022\034\n\024backgroundColorAlpha\030\027 \001(\r\022\026\n\016h" +
      "asBorderColor\030\036 \001(\010\022\026\n\016borderColorRed\030\037 " +
      "\001(\r\022\030\n\020borderColorGreen\030  \001(\r\022\027\n\017borderC" +
      "olorBlue\030! \001(\r\022\030\n\020borderColorAlpha\030\" \001(\r" +
      "\022\023\n\013borderWidth\030\004 \001(\001\022\024\n\014cornerRadius\030\005 ",
      "\001(\001\022\024\n\014shadowRadius\030\007 \001(\001\022\025\n\rshadowOffse" +
      "tX\030\n \001(\001\022\025\n\rshadowOffsetY\030\t \001(\001\022\026\n\016hasSh" +
      "adowColor\030Z \001(\010\022\026\n\016shadowColorRed\030[ \001(\r\022" +
      "\027\n\017shadowColorBlue\030\\ \001(\r\022\030\n\020shadowColorG" +
      "reen\030] \001(\r\022\030\n\020shadowColorAlpha\030^ \001(\rB@\n\036" +
      "io.gomatcha.matcha.proto.paintB\007PbPaintZ" +
      "\005paint\242\002\rMatchaPaintPBb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_matcha_paint_Style_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_matcha_paint_Style_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_matcha_paint_Style_descriptor,
        new java.lang.String[] { "Transparency", "HasBackgroundColor", "BackgroundColorRed", "BackgroundColorGreen", "BackgroundColorBlue", "BackgroundColorAlpha", "HasBorderColor", "BorderColorRed", "BorderColorGreen", "BorderColorBlue", "BorderColorAlpha", "BorderWidth", "CornerRadius", "ShadowRadius", "ShadowOffsetX", "ShadowOffsetY", "HasShadowColor", "ShadowColorRed", "ShadowColorBlue", "ShadowColorGreen", "ShadowColorAlpha", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
