// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/proto/paint/paint.proto

/*
Package paint is a generated protocol buffer package.

It is generated from these files:
	gomatcha.io/matcha/proto/paint/paint.proto

It has these top-level messages:
	Style
*/
package paint

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Style struct {
	Transparency         float64 `protobuf:"fixed64,1,opt,name=transparency" json:"transparency,omitempty"`
	HasBackgroundColor   bool    `protobuf:"varint,24,opt,name=hasBackgroundColor" json:"hasBackgroundColor,omitempty"`
	BackgroundColorRed   uint32  `protobuf:"varint,20,opt,name=backgroundColorRed" json:"backgroundColorRed,omitempty"`
	BackgroundColorGreen uint32  `protobuf:"varint,21,opt,name=backgroundColorGreen" json:"backgroundColorGreen,omitempty"`
	BackgroundColorBlue  uint32  `protobuf:"varint,22,opt,name=backgroundColorBlue" json:"backgroundColorBlue,omitempty"`
	BackgroundColorAlpha uint32  `protobuf:"varint,23,opt,name=backgroundColorAlpha" json:"backgroundColorAlpha,omitempty"`
	HasBorderColor       bool    `protobuf:"varint,30,opt,name=hasBorderColor" json:"hasBorderColor,omitempty"`
	BorderColorRed       uint32  `protobuf:"varint,31,opt,name=borderColorRed" json:"borderColorRed,omitempty"`
	BorderColorGreen     uint32  `protobuf:"varint,32,opt,name=borderColorGreen" json:"borderColorGreen,omitempty"`
	BorderColorBlue      uint32  `protobuf:"varint,33,opt,name=borderColorBlue" json:"borderColorBlue,omitempty"`
	BorderColorAlpha     uint32  `protobuf:"varint,34,opt,name=borderColorAlpha" json:"borderColorAlpha,omitempty"`
	BorderWidth          float64 `protobuf:"fixed64,4,opt,name=borderWidth" json:"borderWidth,omitempty"`
	CornerRadius         float64 `protobuf:"fixed64,5,opt,name=cornerRadius" json:"cornerRadius,omitempty"`
	ShadowRadius         float64 `protobuf:"fixed64,7,opt,name=shadowRadius" json:"shadowRadius,omitempty"`
	ShadowOffsetX        float64 `protobuf:"fixed64,10,opt,name=shadowOffsetX" json:"shadowOffsetX,omitempty"`
	ShadowOffsetY        float64 `protobuf:"fixed64,9,opt,name=shadowOffsetY" json:"shadowOffsetY,omitempty"`
	HasShadowColor       bool    `protobuf:"varint,90,opt,name=hasShadowColor" json:"hasShadowColor,omitempty"`
	ShadowColorRed       uint32  `protobuf:"varint,91,opt,name=shadowColorRed" json:"shadowColorRed,omitempty"`
	ShadowColorBlue      uint32  `protobuf:"varint,92,opt,name=shadowColorBlue" json:"shadowColorBlue,omitempty"`
	ShadowColorGreen     uint32  `protobuf:"varint,93,opt,name=shadowColorGreen" json:"shadowColorGreen,omitempty"`
	ShadowColorAlpha     uint32  `protobuf:"varint,94,opt,name=shadowColorAlpha" json:"shadowColorAlpha,omitempty"`
}

func (m *Style) Reset()                    { *m = Style{} }
func (m *Style) String() string            { return proto.CompactTextString(m) }
func (*Style) ProtoMessage()               {}
func (*Style) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Style) GetTransparency() float64 {
	if m != nil {
		return m.Transparency
	}
	return 0
}

func (m *Style) GetHasBackgroundColor() bool {
	if m != nil {
		return m.HasBackgroundColor
	}
	return false
}

func (m *Style) GetBackgroundColorRed() uint32 {
	if m != nil {
		return m.BackgroundColorRed
	}
	return 0
}

func (m *Style) GetBackgroundColorGreen() uint32 {
	if m != nil {
		return m.BackgroundColorGreen
	}
	return 0
}

func (m *Style) GetBackgroundColorBlue() uint32 {
	if m != nil {
		return m.BackgroundColorBlue
	}
	return 0
}

func (m *Style) GetBackgroundColorAlpha() uint32 {
	if m != nil {
		return m.BackgroundColorAlpha
	}
	return 0
}

func (m *Style) GetHasBorderColor() bool {
	if m != nil {
		return m.HasBorderColor
	}
	return false
}

func (m *Style) GetBorderColorRed() uint32 {
	if m != nil {
		return m.BorderColorRed
	}
	return 0
}

func (m *Style) GetBorderColorGreen() uint32 {
	if m != nil {
		return m.BorderColorGreen
	}
	return 0
}

func (m *Style) GetBorderColorBlue() uint32 {
	if m != nil {
		return m.BorderColorBlue
	}
	return 0
}

func (m *Style) GetBorderColorAlpha() uint32 {
	if m != nil {
		return m.BorderColorAlpha
	}
	return 0
}

func (m *Style) GetBorderWidth() float64 {
	if m != nil {
		return m.BorderWidth
	}
	return 0
}

func (m *Style) GetCornerRadius() float64 {
	if m != nil {
		return m.CornerRadius
	}
	return 0
}

func (m *Style) GetShadowRadius() float64 {
	if m != nil {
		return m.ShadowRadius
	}
	return 0
}

func (m *Style) GetShadowOffsetX() float64 {
	if m != nil {
		return m.ShadowOffsetX
	}
	return 0
}

func (m *Style) GetShadowOffsetY() float64 {
	if m != nil {
		return m.ShadowOffsetY
	}
	return 0
}

func (m *Style) GetHasShadowColor() bool {
	if m != nil {
		return m.HasShadowColor
	}
	return false
}

func (m *Style) GetShadowColorRed() uint32 {
	if m != nil {
		return m.ShadowColorRed
	}
	return 0
}

func (m *Style) GetShadowColorBlue() uint32 {
	if m != nil {
		return m.ShadowColorBlue
	}
	return 0
}

func (m *Style) GetShadowColorGreen() uint32 {
	if m != nil {
		return m.ShadowColorGreen
	}
	return 0
}

func (m *Style) GetShadowColorAlpha() uint32 {
	if m != nil {
		return m.ShadowColorAlpha
	}
	return 0
}

func init() {
	proto.RegisterType((*Style)(nil), "matcha.paint.Style")
}

func init() { proto.RegisterFile("gomatcha.io/matcha/proto/paint/paint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0x87, 0x15, 0x44, 0x5b, 0x30, 0x2d, 0x20, 0x53, 0xc0, 0x57, 0x25, 0x54, 0x08, 0x45, 0xbd,
	0x48, 0x11, 0xbc, 0x00, 0x84, 0x0b, 0xae, 0xd0, 0xaa, 0xf4, 0x62, 0x6b, 0xf7, 0x47, 0x72, 0x12,
	0xb7, 0x89, 0x96, 0xc5, 0x91, 0x93, 0x6a, 0xea, 0xeb, 0xec, 0x45, 0x37, 0xf9, 0x9c, 0xae, 0x75,
	0x9c, 0xdc, 0x44, 0xf1, 0x77, 0xbe, 0x38, 0x3a, 0xe7, 0x67, 0x93, 0xd9, 0x56, 0xde, 0xf1, 0x3a,
	0x4e, 0xb9, 0x9f, 0xc9, 0x39, 0xbe, 0xcd, 0x4b, 0x25, 0x6b, 0x39, 0x2f, 0x79, 0x56, 0xd4, 0xf8,
	0xf4, 0x81, 0xd0, 0xe1, 0xc1, 0x04, 0x36, 0x7d, 0xec, 0x93, 0xde, 0xb2, 0xde, 0xe7, 0x82, 0x4e,
	0xc9, 0xb0, 0x56, 0xbc, 0xa8, 0x4a, 0xae, 0x44, 0x11, 0xef, 0x99, 0xe3, 0x3a, 0x9e, 0x13, 0x36,
	0x18, 0xf5, 0x09, 0x4d, 0x79, 0x15, 0xf0, 0xf8, 0x76, 0xab, 0xe4, 0xae, 0x48, 0xfe, 0xca, 0x5c,
	0x2a, 0xc6, 0x5c, 0xc7, 0x7b, 0x15, 0x76, 0x54, 0xb4, 0x1f, 0x35, 0x51, 0x28, 0x12, 0x36, 0x76,
	0x1d, 0x6f, 0x14, 0x76, 0x54, 0xe8, 0x4f, 0x32, 0xb6, 0xe8, 0x3f, 0x25, 0x44, 0xc1, 0x3e, 0xc2,
	0x17, 0x9d, 0x35, 0xfa, 0x83, 0x7c, 0xb0, 0x78, 0x90, 0xef, 0x04, 0xfb, 0x04, 0x9f, 0x74, 0x95,
	0x3a, 0xfe, 0xf2, 0x27, 0x2f, 0x53, 0xce, 0x3e, 0x77, 0xfe, 0x05, 0x6a, 0xf4, 0x3b, 0x79, 0xab,
	0xfb, 0x93, 0x2a, 0x11, 0x0a, 0xbb, 0x9e, 0x40, 0xd7, 0x16, 0xd5, 0x5e, 0x74, 0x5a, 0xea, 0x6e,
	0xbf, 0xc0, 0xae, 0x16, 0xa5, 0x33, 0xf2, 0xde, 0x20, 0xd8, 0xa5, 0x0b, 0x66, 0x8b, 0x53, 0x8f,
	0xbc, 0x33, 0x18, 0x74, 0xf7, 0x15, 0x54, 0x1b, 0x5b, 0xbb, 0x62, 0x57, 0xd3, 0xd6, 0xae, 0xd8,
	0x91, 0x4b, 0xde, 0x20, 0x3b, 0xcf, 0x92, 0x3a, 0x65, 0x2f, 0x21, 0x6e, 0x13, 0xe9, 0x13, 0x11,
	0x4b, 0x55, 0x08, 0x15, 0xf2, 0x24, 0xdb, 0x55, 0xac, 0x87, 0x27, 0xc2, 0x64, 0xda, 0xa9, 0x52,
	0x9e, 0xc8, 0xfb, 0x83, 0x33, 0x40, 0xc7, 0x64, 0xf4, 0x1b, 0x19, 0xe1, 0xfa, 0x6c, 0xb3, 0xa9,
	0x44, 0x7d, 0xc1, 0x08, 0x48, 0x4d, 0x68, 0x5b, 0x2b, 0xf6, 0xba, 0x6d, 0xad, 0x0e, 0x39, 0x2c,
	0x81, 0x61, 0x0e, 0xeb, 0x63, 0x0e, 0x06, 0xd5, 0x5e, 0x75, 0x5a, 0xea, 0x1c, 0x2e, 0x31, 0x87,
	0x26, 0xd5, 0xb3, 0x35, 0x08, 0xcc, 0xf6, 0x0a, 0x67, 0x6b, 0x61, 0x3d, 0x5b, 0x03, 0x61, 0x62,
	0xd7, 0x38, 0x5b, 0x9b, 0x5b, 0x2e, 0xe6, 0x70, 0xd3, 0x72, 0x81, 0x07, 0xbf, 0xc9, 0x24, 0x93,
	0xfe, 0xf1, 0x02, 0x3f, 0xdf, 0x4e, 0x7d, 0x57, 0xf1, 0x8e, 0x06, 0x83, 0x45, 0xb4, 0xd0, 0x2f,
	0xeb, 0x1e, 0xac, 0x1f, 0x5e, 0x8c, 0xfe, 0x83, 0x04, 0x70, 0x11, 0x44, 0x7d, 0x90, 0x7f, 0x3d,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xef, 0x55, 0xc2, 0x0a, 0x06, 0x04, 0x00, 0x00,
}
