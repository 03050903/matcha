// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/proto/text/text.proto

/*
Package text is a generated protocol buffer package.

It is generated from these files:
	gomatcha.io/matcha/proto/text/text.proto

It has these top-level messages:
	SizeFunc
	Text
	StyledText
	Font
	TextStyle
*/
package text

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha_layout "gomatcha.io/matcha/proto/layout"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TextAlignment int32

const (
	TextAlignment_TEXT_ALIGNMENT_LEFT      TextAlignment = 0
	TextAlignment_TEXT_ALIGNMENT_RIGHT     TextAlignment = 1
	TextAlignment_TEXT_ALIGNMENT_CENTER    TextAlignment = 2
	TextAlignment_TEXT_ALIGNMENT_JUSTIFIED TextAlignment = 3
)

var TextAlignment_name = map[int32]string{
	0: "TEXT_ALIGNMENT_LEFT",
	1: "TEXT_ALIGNMENT_RIGHT",
	2: "TEXT_ALIGNMENT_CENTER",
	3: "TEXT_ALIGNMENT_JUSTIFIED",
}
var TextAlignment_value = map[string]int32{
	"TEXT_ALIGNMENT_LEFT":      0,
	"TEXT_ALIGNMENT_RIGHT":     1,
	"TEXT_ALIGNMENT_CENTER":    2,
	"TEXT_ALIGNMENT_JUSTIFIED": 3,
}

func (x TextAlignment) String() string {
	return proto.EnumName(TextAlignment_name, int32(x))
}
func (TextAlignment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StrikethroughStyle int32

const (
	StrikethroughStyle_STRIKETHROUGH_STYLE_NONE   StrikethroughStyle = 0
	StrikethroughStyle_STRIKETHROUGH_STYLE_SINGLE StrikethroughStyle = 1
	StrikethroughStyle_STRIKETHROUGH_STYLE_DOUBLE StrikethroughStyle = 2
	StrikethroughStyle_STRIKETHROUGH_STYLE_THICK  StrikethroughStyle = 3
	StrikethroughStyle_STRIKETHROUGH_STYLE_DOTTED StrikethroughStyle = 4
	StrikethroughStyle_STRIKETHROUGH_STYLE_DASHED StrikethroughStyle = 5
)

var StrikethroughStyle_name = map[int32]string{
	0: "STRIKETHROUGH_STYLE_NONE",
	1: "STRIKETHROUGH_STYLE_SINGLE",
	2: "STRIKETHROUGH_STYLE_DOUBLE",
	3: "STRIKETHROUGH_STYLE_THICK",
	4: "STRIKETHROUGH_STYLE_DOTTED",
	5: "STRIKETHROUGH_STYLE_DASHED",
}
var StrikethroughStyle_value = map[string]int32{
	"STRIKETHROUGH_STYLE_NONE":   0,
	"STRIKETHROUGH_STYLE_SINGLE": 1,
	"STRIKETHROUGH_STYLE_DOUBLE": 2,
	"STRIKETHROUGH_STYLE_THICK":  3,
	"STRIKETHROUGH_STYLE_DOTTED": 4,
	"STRIKETHROUGH_STYLE_DASHED": 5,
}

func (x StrikethroughStyle) String() string {
	return proto.EnumName(StrikethroughStyle_name, int32(x))
}
func (StrikethroughStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UnderlineStyle int32

const (
	UnderlineStyle_UNDRELINE_STYLE_NONE   UnderlineStyle = 0
	UnderlineStyle_UNDRELINE_STYLE_SINGLE UnderlineStyle = 1
	UnderlineStyle_UNDRELINE_STYLE_DOUBLE UnderlineStyle = 2
	UnderlineStyle_UNDRELINE_STYLE_THICK  UnderlineStyle = 3
	UnderlineStyle_UNDRELINE_STYLE_DOTTED UnderlineStyle = 4
	UnderlineStyle_UNDRELINE_STYLE_DASHED UnderlineStyle = 5
)

var UnderlineStyle_name = map[int32]string{
	0: "UNDRELINE_STYLE_NONE",
	1: "UNDRELINE_STYLE_SINGLE",
	2: "UNDRELINE_STYLE_DOUBLE",
	3: "UNDRELINE_STYLE_THICK",
	4: "UNDRELINE_STYLE_DOTTED",
	5: "UNDRELINE_STYLE_DASHED",
}
var UnderlineStyle_value = map[string]int32{
	"UNDRELINE_STYLE_NONE":   0,
	"UNDRELINE_STYLE_SINGLE": 1,
	"UNDRELINE_STYLE_DOUBLE": 2,
	"UNDRELINE_STYLE_THICK":  3,
	"UNDRELINE_STYLE_DOTTED": 4,
	"UNDRELINE_STYLE_DASHED": 5,
}

func (x UnderlineStyle) String() string {
	return proto.EnumName(UnderlineStyle_name, int32(x))
}
func (UnderlineStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TextWrap int32

const (
	TextWrap_TEXT_WRAP_NONE      TextWrap = 0
	TextWrap_TEXT_WRAP_WORD      TextWrap = 1
	TextWrap_TEXT_WRAP_CHARACTER TextWrap = 2
)

var TextWrap_name = map[int32]string{
	0: "TEXT_WRAP_NONE",
	1: "TEXT_WRAP_WORD",
	2: "TEXT_WRAP_CHARACTER",
}
var TextWrap_value = map[string]int32{
	"TEXT_WRAP_NONE":      0,
	"TEXT_WRAP_WORD":      1,
	"TEXT_WRAP_CHARACTER": 2,
}

func (x TextWrap) String() string {
	return proto.EnumName(TextWrap_name, int32(x))
}
func (TextWrap) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Truncation int32

const (
	Truncation_TRUNCATION_NONE   Truncation = 0
	Truncation_TRUNCATION_START  Truncation = 1
	Truncation_TRUNCATION_MIDDLE Truncation = 2
	Truncation_TRUNCATION_END    Truncation = 3
)

var Truncation_name = map[int32]string{
	0: "TRUNCATION_NONE",
	1: "TRUNCATION_START",
	2: "TRUNCATION_MIDDLE",
	3: "TRUNCATION_END",
}
var Truncation_value = map[string]int32{
	"TRUNCATION_NONE":   0,
	"TRUNCATION_START":  1,
	"TRUNCATION_MIDDLE": 2,
	"TRUNCATION_END":    3,
}

func (x Truncation) String() string {
	return proto.EnumName(Truncation_name, int32(x))
}
func (Truncation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SizeFunc struct {
	Text    *StyledText          `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	MinSize *matcha_layout.Point `protobuf:"bytes,2,opt,name=minSize" json:"minSize,omitempty"`
	MaxSize *matcha_layout.Point `protobuf:"bytes,3,opt,name=maxSize" json:"maxSize,omitempty"`
}

func (m *SizeFunc) Reset()                    { *m = SizeFunc{} }
func (m *SizeFunc) String() string            { return proto.CompactTextString(m) }
func (*SizeFunc) ProtoMessage()               {}
func (*SizeFunc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SizeFunc) GetText() *StyledText {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *SizeFunc) GetMinSize() *matcha_layout.Point {
	if m != nil {
		return m.MinSize
	}
	return nil
}

func (m *SizeFunc) GetMaxSize() *matcha_layout.Point {
	if m != nil {
		return m.MaxSize
	}
	return nil
}

type Text struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *Text) Reset()                    { *m = Text{} }
func (m *Text) String() string            { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()               {}
func (*Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type StyledText struct {
	Styles []*TextStyle `protobuf:"bytes,1,rep,name=styles" json:"styles,omitempty"`
	Text   *Text        `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *StyledText) Reset()                    { *m = StyledText{} }
func (m *StyledText) String() string            { return proto.CompactTextString(m) }
func (*StyledText) ProtoMessage()               {}
func (*StyledText) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StyledText) GetStyles() []*TextStyle {
	if m != nil {
		return m.Styles
	}
	return nil
}

func (m *StyledText) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

type Font struct {
	Family string  `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	Face   string  `protobuf:"bytes,2,opt,name=face" json:"face,omitempty"`
	Size   float64 `protobuf:"fixed64,3,opt,name=size" json:"size,omitempty"`
}

func (m *Font) Reset()                    { *m = Font{} }
func (m *Font) String() string            { return proto.CompactTextString(m) }
func (*Font) ProtoMessage()               {}
func (*Font) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Font) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Font) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Font) GetSize() float64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type TextStyle struct {
	Index                   int64              `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	TextAlignment           TextAlignment      `protobuf:"varint,2,opt,name=textAlignment,enum=matcha.text.TextAlignment" json:"textAlignment,omitempty"`
	StrikethroughStyle      StrikethroughStyle `protobuf:"varint,4,opt,name=strikethroughStyle,enum=matcha.text.StrikethroughStyle" json:"strikethroughStyle,omitempty"`
	HasStrikethroughColor   bool               `protobuf:"varint,31,opt,name=hasStrikethroughColor" json:"hasStrikethroughColor,omitempty"`
	StrikethroughColorRed   uint32             `protobuf:"varint,32,opt,name=strikethroughColorRed" json:"strikethroughColorRed,omitempty"`
	StrikethroughColorGreen uint32             `protobuf:"varint,33,opt,name=strikethroughColorGreen" json:"strikethroughColorGreen,omitempty"`
	StrikethroughColorBlue  uint32             `protobuf:"varint,34,opt,name=strikethroughColorBlue" json:"strikethroughColorBlue,omitempty"`
	StrikethroughColorAlpha uint32             `protobuf:"varint,35,opt,name=strikethroughColorAlpha" json:"strikethroughColorAlpha,omitempty"`
	UnderlineStyle          UnderlineStyle     `protobuf:"varint,8,opt,name=underlineStyle,enum=matcha.text.UnderlineStyle" json:"underlineStyle,omitempty"`
	HasUnderlineColor       bool               `protobuf:"varint,41,opt,name=hasUnderlineColor" json:"hasUnderlineColor,omitempty"`
	UnderlineColorRed       uint32             `protobuf:"varint,42,opt,name=underlineColorRed" json:"underlineColorRed,omitempty"`
	UnderlineColorGreen     uint32             `protobuf:"varint,43,opt,name=underlineColorGreen" json:"underlineColorGreen,omitempty"`
	UnderlineColorBlue      uint32             `protobuf:"varint,44,opt,name=underlineColorBlue" json:"underlineColorBlue,omitempty"`
	UnderlineColorAlpha     uint32             `protobuf:"varint,45,opt,name=underlineColorAlpha" json:"underlineColorAlpha,omitempty"`
	Hyphenation             float64            `protobuf:"fixed64,14,opt,name=hyphenation" json:"hyphenation,omitempty"`
	LineHeightMultiple      float64            `protobuf:"fixed64,16,opt,name=lineHeightMultiple" json:"lineHeightMultiple,omitempty"`
	MaxLines                int64              `protobuf:"varint,18,opt,name=maxLines" json:"maxLines,omitempty"`
	HasTextColor            bool               `protobuf:"varint,51,opt,name=hasTextColor" json:"hasTextColor,omitempty"`
	TextColorRed            uint32             `protobuf:"varint,52,opt,name=textColorRed" json:"textColorRed,omitempty"`
	TextColorGreen          uint32             `protobuf:"varint,53,opt,name=textColorGreen" json:"textColorGreen,omitempty"`
	TextColorBlue           uint32             `protobuf:"varint,54,opt,name=textColorBlue" json:"textColorBlue,omitempty"`
	TextColorAlpha          uint32             `protobuf:"varint,55,opt,name=textColorAlpha" json:"textColorAlpha,omitempty"`
	Wrap                    TextWrap           `protobuf:"varint,22,opt,name=wrap,enum=matcha.text.TextWrap" json:"wrap,omitempty"`
	Truncation              Truncation         `protobuf:"varint,24,opt,name=truncation,enum=matcha.text.Truncation" json:"truncation,omitempty"`
	TruncationString        string             `protobuf:"bytes,26,opt,name=truncationString" json:"truncationString,omitempty"`
	FontName                string             `protobuf:"bytes,27,opt,name=fontName" json:"fontName,omitempty"`
	FontSize                float64            `protobuf:"fixed64,29,opt,name=fontSize" json:"fontSize,omitempty"`
}

func (m *TextStyle) Reset()                    { *m = TextStyle{} }
func (m *TextStyle) String() string            { return proto.CompactTextString(m) }
func (*TextStyle) ProtoMessage()               {}
func (*TextStyle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TextStyle) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TextStyle) GetTextAlignment() TextAlignment {
	if m != nil {
		return m.TextAlignment
	}
	return TextAlignment_TEXT_ALIGNMENT_LEFT
}

func (m *TextStyle) GetStrikethroughStyle() StrikethroughStyle {
	if m != nil {
		return m.StrikethroughStyle
	}
	return StrikethroughStyle_STRIKETHROUGH_STYLE_NONE
}

func (m *TextStyle) GetHasStrikethroughColor() bool {
	if m != nil {
		return m.HasStrikethroughColor
	}
	return false
}

func (m *TextStyle) GetStrikethroughColorRed() uint32 {
	if m != nil {
		return m.StrikethroughColorRed
	}
	return 0
}

func (m *TextStyle) GetStrikethroughColorGreen() uint32 {
	if m != nil {
		return m.StrikethroughColorGreen
	}
	return 0
}

func (m *TextStyle) GetStrikethroughColorBlue() uint32 {
	if m != nil {
		return m.StrikethroughColorBlue
	}
	return 0
}

func (m *TextStyle) GetStrikethroughColorAlpha() uint32 {
	if m != nil {
		return m.StrikethroughColorAlpha
	}
	return 0
}

func (m *TextStyle) GetUnderlineStyle() UnderlineStyle {
	if m != nil {
		return m.UnderlineStyle
	}
	return UnderlineStyle_UNDRELINE_STYLE_NONE
}

func (m *TextStyle) GetHasUnderlineColor() bool {
	if m != nil {
		return m.HasUnderlineColor
	}
	return false
}

func (m *TextStyle) GetUnderlineColorRed() uint32 {
	if m != nil {
		return m.UnderlineColorRed
	}
	return 0
}

func (m *TextStyle) GetUnderlineColorGreen() uint32 {
	if m != nil {
		return m.UnderlineColorGreen
	}
	return 0
}

func (m *TextStyle) GetUnderlineColorBlue() uint32 {
	if m != nil {
		return m.UnderlineColorBlue
	}
	return 0
}

func (m *TextStyle) GetUnderlineColorAlpha() uint32 {
	if m != nil {
		return m.UnderlineColorAlpha
	}
	return 0
}

func (m *TextStyle) GetHyphenation() float64 {
	if m != nil {
		return m.Hyphenation
	}
	return 0
}

func (m *TextStyle) GetLineHeightMultiple() float64 {
	if m != nil {
		return m.LineHeightMultiple
	}
	return 0
}

func (m *TextStyle) GetMaxLines() int64 {
	if m != nil {
		return m.MaxLines
	}
	return 0
}

func (m *TextStyle) GetHasTextColor() bool {
	if m != nil {
		return m.HasTextColor
	}
	return false
}

func (m *TextStyle) GetTextColorRed() uint32 {
	if m != nil {
		return m.TextColorRed
	}
	return 0
}

func (m *TextStyle) GetTextColorGreen() uint32 {
	if m != nil {
		return m.TextColorGreen
	}
	return 0
}

func (m *TextStyle) GetTextColorBlue() uint32 {
	if m != nil {
		return m.TextColorBlue
	}
	return 0
}

func (m *TextStyle) GetTextColorAlpha() uint32 {
	if m != nil {
		return m.TextColorAlpha
	}
	return 0
}

func (m *TextStyle) GetWrap() TextWrap {
	if m != nil {
		return m.Wrap
	}
	return TextWrap_TEXT_WRAP_NONE
}

func (m *TextStyle) GetTruncation() Truncation {
	if m != nil {
		return m.Truncation
	}
	return Truncation_TRUNCATION_NONE
}

func (m *TextStyle) GetTruncationString() string {
	if m != nil {
		return m.TruncationString
	}
	return ""
}

func (m *TextStyle) GetFontName() string {
	if m != nil {
		return m.FontName
	}
	return ""
}

func (m *TextStyle) GetFontSize() float64 {
	if m != nil {
		return m.FontSize
	}
	return 0
}

func init() {
	proto.RegisterType((*SizeFunc)(nil), "matcha.text.SizeFunc")
	proto.RegisterType((*Text)(nil), "matcha.text.Text")
	proto.RegisterType((*StyledText)(nil), "matcha.text.StyledText")
	proto.RegisterType((*Font)(nil), "matcha.text.Font")
	proto.RegisterType((*TextStyle)(nil), "matcha.text.TextStyle")
	proto.RegisterEnum("matcha.text.TextAlignment", TextAlignment_name, TextAlignment_value)
	proto.RegisterEnum("matcha.text.StrikethroughStyle", StrikethroughStyle_name, StrikethroughStyle_value)
	proto.RegisterEnum("matcha.text.UnderlineStyle", UnderlineStyle_name, UnderlineStyle_value)
	proto.RegisterEnum("matcha.text.TextWrap", TextWrap_name, TextWrap_value)
	proto.RegisterEnum("matcha.text.Truncation", Truncation_name, Truncation_value)
}

func init() { proto.RegisterFile("gomatcha.io/matcha/proto/text/text.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 977 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcb, 0x72, 0xe2, 0x46,
	0x14, 0x1d, 0x19, 0xc6, 0xc1, 0xd7, 0x31, 0x91, 0xdb, 0x06, 0xcb, 0x4c, 0x9c, 0x21, 0xe4, 0x51,
	0x0c, 0xe3, 0xe0, 0x94, 0x67, 0x32, 0x33, 0xcb, 0xf0, 0x10, 0xa0, 0x18, 0x0b, 0x57, 0x23, 0xca,
	0x49, 0x36, 0x2e, 0x19, 0xcb, 0x48, 0x15, 0x21, 0x51, 0x20, 0x2a, 0x38, 0xf9, 0x90, 0xec, 0xf3,
	0x0f, 0xf9, 0x90, 0x7c, 0x4c, 0xf6, 0xa9, 0xbe, 0x2d, 0x09, 0xf4, 0x60, 0x36, 0xa0, 0x7b, 0xce,
	0xb9, 0x8f, 0x3e, 0xea, 0xee, 0x12, 0x54, 0x27, 0xee, 0x54, 0xf7, 0xc6, 0xa6, 0x5e, 0xb7, 0xdc,
	0x0b, 0xfe, 0x74, 0x31, 0x9b, 0xbb, 0x9e, 0x7b, 0xe1, 0x19, 0x2b, 0x0f, 0x7f, 0xea, 0x18, 0x93,
	0x7d, 0x5f, 0xc7, 0xa0, 0xd2, 0xf9, 0xd6, 0x34, 0x5b, 0x7f, 0x72, 0x97, 0x9e, 0xff, 0xc7, 0x53,
	0x2b, 0x7f, 0x09, 0x90, 0x1b, 0x5a, 0x7f, 0x18, 0x9d, 0xa5, 0x33, 0x26, 0xaf, 0x21, 0xcb, 0x4a,
	0x48, 0x42, 0x59, 0xa8, 0xee, 0x5f, 0x9e, 0xd4, 0x37, 0xca, 0xd6, 0x87, 0xde, 0x93, 0x6d, 0x3c,
	0x68, 0xc6, 0xca, 0xa3, 0x28, 0x22, 0x75, 0xf8, 0x64, 0x6a, 0x39, 0x2c, 0x57, 0xda, 0x41, 0xfd,
	0x71, 0xa0, 0xf7, 0x1b, 0xdc, 0xb8, 0x96, 0xe3, 0xd1, 0x40, 0x84, 0x7a, 0x7d, 0x85, 0xfa, 0xcc,
	0x47, 0xf5, 0x5c, 0x54, 0x29, 0x41, 0x96, 0x75, 0x23, 0x64, 0x63, 0xa8, 0x3d, 0xde, 0xbb, 0x32,
	0x06, 0x58, 0xcf, 0x43, 0xea, 0xb0, 0xbb, 0x60, 0xd1, 0x42, 0x12, 0xca, 0x99, 0xea, 0xfe, 0x65,
	0x31, 0x32, 0x38, 0x93, 0xa0, 0x98, 0xfa, 0x2a, 0xf2, 0x8d, 0x5f, 0x91, 0x8f, 0x7d, 0x98, 0x50,
	0xfb, 0x4d, 0x3a, 0x90, 0xed, 0xb8, 0x8e, 0x47, 0x8a, 0xb0, 0xfb, 0xa8, 0x4f, 0x2d, 0xfb, 0xc9,
	0x1f, 0xc1, 0x8f, 0xd8, 0x60, 0x8f, 0xfa, 0x98, 0xaf, 0x7e, 0x8f, 0xe2, 0x33, 0xc3, 0x16, 0xc1,
	0x0a, 0x05, 0x8a, 0xcf, 0x95, 0xff, 0xf6, 0x60, 0x2f, 0x1c, 0x82, 0x1c, 0xc3, 0x73, 0xcb, 0x79,
	0x30, 0x56, 0x58, 0x2c, 0x43, 0x79, 0x40, 0x7e, 0x84, 0x03, 0xd6, 0xb3, 0x61, 0x5b, 0x13, 0x67,
	0x6a, 0x38, 0x7c, 0xb6, 0xfc, 0x65, 0x29, 0x31, 0x5b, 0xa8, 0xa0, 0xd1, 0x04, 0x32, 0x00, 0xb2,
	0xf0, 0xe6, 0xd6, 0x6f, 0x86, 0x67, 0xce, 0xdd, 0xe5, 0xc4, 0xc4, 0x6e, 0x52, 0x16, 0xcb, 0xbc,
	0x8c, 0xbd, 0xc9, 0xb8, 0x8c, 0xa6, 0xa4, 0x92, 0xb7, 0x50, 0x30, 0xf5, 0x45, 0x44, 0xdc, 0x72,
	0x6d, 0x77, 0x2e, 0xbd, 0x2c, 0x0b, 0xd5, 0x1c, 0x4d, 0x27, 0x59, 0xd6, 0x22, 0x81, 0x52, 0xe3,
	0x41, 0x2a, 0x97, 0x85, 0xea, 0x01, 0x4d, 0x27, 0xc9, 0x07, 0x38, 0x49, 0x12, 0xdd, 0xb9, 0x61,
	0x38, 0xd2, 0x97, 0x98, 0xb7, 0x8d, 0x26, 0xef, 0xa0, 0x98, 0xa4, 0x9a, 0xf6, 0xd2, 0x90, 0x2a,
	0x98, 0xb8, 0x85, 0x4d, 0xef, 0xd8, 0xb0, 0x67, 0xa6, 0x2e, 0x7d, 0xb5, 0xad, 0x23, 0xd2, 0xa4,
	0x05, 0xf9, 0xa5, 0xf3, 0x60, 0xcc, 0x6d, 0xcb, 0x31, 0xb8, 0xc9, 0x39, 0x34, 0xf9, 0x45, 0xc4,
	0xe4, 0x51, 0x44, 0x42, 0x63, 0x29, 0xe4, 0x1c, 0x0e, 0x4d, 0x7d, 0x11, 0x8a, 0xb8, 0xb1, 0xaf,
	0xd0, 0xd8, 0x24, 0xc1, 0xd4, 0xcb, 0x08, 0xc2, 0x0c, 0xad, 0xe1, 0x98, 0x49, 0x82, 0x7c, 0x0f,
	0x47, 0x51, 0x90, 0x1b, 0xf9, 0x1a, 0xf5, 0x69, 0x14, 0xa9, 0x03, 0x89, 0xc2, 0x68, 0xe0, 0x39,
	0x26, 0xa4, 0x30, 0xc9, 0x0e, 0xdc, 0xb8, 0xef, 0xd2, 0x3a, 0x70, 0xd3, 0xca, 0xb0, 0x6f, 0x3e,
	0xcd, 0x4c, 0xc3, 0xd1, 0x3d, 0xcb, 0x75, 0xa4, 0x3c, 0x1e, 0x8f, 0x4d, 0x88, 0xcd, 0xc0, 0x72,
	0x7a, 0x86, 0x35, 0x31, 0xbd, 0xeb, 0xa5, 0xed, 0x59, 0x33, 0xdb, 0x90, 0x44, 0x14, 0xa6, 0x30,
	0xa4, 0x04, 0xb9, 0xa9, 0xbe, 0xea, 0x5b, 0x8e, 0xb1, 0x90, 0x08, 0x1e, 0xa5, 0x30, 0x26, 0x15,
	0xf8, 0xd4, 0xd4, 0x17, 0xec, 0xb8, 0x70, 0x63, 0xdf, 0xa0, 0xb1, 0x11, 0x8c, 0x69, 0xbc, 0x20,
	0x60, 0x76, 0xbe, 0xc5, 0xe1, 0x23, 0x18, 0xf9, 0x16, 0xf2, 0x61, 0xcc, 0x4d, 0xfc, 0x01, 0x55,
	0x31, 0x94, 0x7c, 0xcd, 0x4f, 0xef, 0xda, 0xba, 0x77, 0x28, 0x8b, 0x82, 0x91, 0x6a, 0xdc, 0xb0,
	0xf7, 0xb1, 0x6a, 0xdc, 0xab, 0x57, 0x90, 0xfd, 0x7d, 0xae, 0xcf, 0xa4, 0x22, 0x6e, 0xab, 0x42,
	0xe2, 0x0a, 0xb8, 0x9d, 0xeb, 0x33, 0x8a, 0x12, 0xf2, 0x1e, 0xc0, 0x9b, 0x2f, 0x9d, 0x31, 0x77,
	0x55, 0xc2, 0x84, 0xe8, 0xb5, 0xad, 0x85, 0x34, 0xdd, 0x90, 0x92, 0x1a, 0x88, 0xeb, 0x88, 0x1d,
	0x63, 0x67, 0x22, 0x95, 0xf0, 0x1e, 0x4b, 0xe0, 0xcc, 0xe9, 0x47, 0xd7, 0xf1, 0x54, 0x7d, 0x6a,
	0x48, 0x2f, 0x50, 0x13, 0xc6, 0x01, 0x87, 0xb7, 0xfa, 0x19, 0xbe, 0xab, 0x30, 0xae, 0xfd, 0x09,
	0x07, 0x91, 0x1b, 0x8b, 0x9c, 0xc0, 0x91, 0x26, 0xff, 0xac, 0xdd, 0x35, 0xfa, 0x4a, 0x57, 0xbd,
	0x96, 0x55, 0xed, 0xae, 0x2f, 0x77, 0x34, 0xf1, 0x19, 0x91, 0xe0, 0x38, 0x46, 0x50, 0xa5, 0xdb,
	0xd3, 0x44, 0x81, 0x9c, 0x42, 0x21, 0xc6, 0xb4, 0x64, 0x55, 0x93, 0xa9, 0xb8, 0x43, 0x3e, 0x07,
	0x29, 0x46, 0xfd, 0x34, 0x1a, 0x6a, 0x4a, 0x47, 0x91, 0xdb, 0x62, 0xa6, 0xf6, 0xaf, 0x00, 0x24,
	0x79, 0xd1, 0xb1, 0xa4, 0xa1, 0x46, 0x95, 0x2b, 0x59, 0xeb, 0xd1, 0xc1, 0xa8, 0xdb, 0xbb, 0x1b,
	0x6a, 0xbf, 0xf4, 0xe5, 0x3b, 0x75, 0xa0, 0xca, 0xe2, 0x33, 0xf2, 0x05, 0x94, 0xd2, 0xd8, 0xa1,
	0xa2, 0x76, 0xfb, 0xb2, 0x28, 0x6c, 0xe3, 0xdb, 0x83, 0x51, 0xb3, 0x2f, 0x8b, 0x3b, 0xe4, 0x0c,
	0x4e, 0xd3, 0x78, 0xad, 0xa7, 0xb4, 0xae, 0xc4, 0xcc, 0xf6, 0x74, 0x4d, 0x93, 0xdb, 0x62, 0x76,
	0x2b, 0xdf, 0x18, 0xf6, 0xe4, 0xb6, 0xf8, 0xbc, 0xf6, 0x8f, 0x00, 0xf9, 0xe8, 0xbd, 0xc2, 0x9c,
	0x1b, 0xa9, 0x6d, 0x2a, 0xf7, 0x15, 0x55, 0x8e, 0xae, 0xa5, 0x04, 0xc5, 0x38, 0x13, 0xae, 0x23,
	0x85, 0x0b, 0xd7, 0x70, 0x0a, 0x85, 0x38, 0x17, 0xcc, 0x9f, 0x9a, 0xe6, 0xcf, 0x9e, 0xc6, 0x05,
	0x73, 0x5f, 0x41, 0x2e, 0xd8, 0xb7, 0x84, 0x40, 0x1e, 0xdf, 0xda, 0x2d, 0x6d, 0xdc, 0x04, 0xa3,
	0x46, 0xb0, 0xdb, 0x01, 0x6d, 0x8b, 0x42, 0xb8, 0x57, 0x10, 0x6b, 0xf5, 0x1a, 0xb4, 0xd1, 0xc2,
	0xd7, 0x5e, 0xbb, 0x07, 0x58, 0xef, 0x69, 0x72, 0x04, 0x9f, 0x69, 0x74, 0xa4, 0xb6, 0x1a, 0x9a,
	0x32, 0x50, 0x83, 0x7a, 0xc7, 0x20, 0x6e, 0x80, 0x43, 0xad, 0x41, 0xd9, 0x56, 0x2a, 0xc0, 0xe1,
	0x06, 0x7a, 0xad, 0xb4, 0xdb, 0xb8, 0x5e, 0xd6, 0x7c, 0x0d, 0xcb, 0x6a, 0x5b, 0xcc, 0x34, 0x3f,
	0xc0, 0x99, 0xe5, 0xd6, 0xc3, 0xef, 0x28, 0xff, 0x0f, 0x3f, 0x98, 0xf0, 0x54, 0x35, 0x77, 0x6f,
	0xee, 0xd9, 0x8a, 0x7e, 0xc5, 0x0f, 0x85, 0xbf, 0x77, 0x72, 0xd7, 0xa8, 0xb8, 0x69, 0xde, 0xef,
	0xa2, 0xe8, 0xcd, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x55, 0x48, 0xa9, 0xbf, 0xbc, 0x09, 0x00,
	0x00,
}
