// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/proto/view/android/stackview.proto

package android

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha "gomatcha.io/matcha/proto"
import matcha_text "gomatcha.io/matcha/proto/text"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StackChildView struct {
	ScreenId int64 `protobuf:"varint,3,opt,name=screenId" json:"screenId,omitempty"`
}

func (m *StackChildView) Reset()                    { *m = StackChildView{} }
func (m *StackChildView) String() string            { return proto.CompactTextString(m) }
func (*StackChildView) ProtoMessage()               {}
func (*StackChildView) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *StackChildView) GetScreenId() int64 {
	if m != nil {
		return m.ScreenId
	}
	return 0
}

type StackView struct {
	Children []*StackChildView `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
}

func (m *StackView) Reset()                    { *m = StackView{} }
func (m *StackView) String() string            { return proto.CompactTextString(m) }
func (*StackView) ProtoMessage()               {}
func (*StackView) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *StackView) GetChildren() []*StackChildView {
	if m != nil {
		return m.Children
	}
	return nil
}

type StackBar struct {
	Title            string                  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	StyledTitle      *matcha_text.StyledText `protobuf:"bytes,6,opt,name=styledTitle" json:"styledTitle,omitempty"`
	Subtitle         string                  `protobuf:"bytes,3,opt,name=subtitle" json:"subtitle,omitempty"`
	StyledSubtitle   *matcha_text.StyledText `protobuf:"bytes,7,opt,name=styledSubtitle" json:"styledSubtitle,omitempty"`
	Color            *matcha.Color           `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Items            []*StackBarItem         `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	BackButtonHidden bool                    `protobuf:"varint,2,opt,name=backButtonHidden" json:"backButtonHidden,omitempty"`
}

func (m *StackBar) Reset()                    { *m = StackBar{} }
func (m *StackBar) String() string            { return proto.CompactTextString(m) }
func (*StackBar) ProtoMessage()               {}
func (*StackBar) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *StackBar) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StackBar) GetStyledTitle() *matcha_text.StyledText {
	if m != nil {
		return m.StyledTitle
	}
	return nil
}

func (m *StackBar) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *StackBar) GetStyledSubtitle() *matcha_text.StyledText {
	if m != nil {
		return m.StyledSubtitle
	}
	return nil
}

func (m *StackBar) GetColor() *matcha.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *StackBar) GetItems() []*StackBarItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *StackBar) GetBackButtonHidden() bool {
	if m != nil {
		return m.BackButtonHidden
	}
	return false
}

type StackBarItem struct {
	Title       string                  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	StyledTitle *matcha_text.StyledText `protobuf:"bytes,6,opt,name=styledTitle" json:"styledTitle,omitempty"`
	Icon        *matcha.ImageOrResource `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	IconTint    *matcha.Color           `protobuf:"bytes,2,opt,name=iconTint" json:"iconTint,omitempty"`
	Disabled    bool                    `protobuf:"varint,4,opt,name=disabled" json:"disabled,omitempty"`
	OnPressFunc string                  `protobuf:"bytes,5,opt,name=onPressFunc" json:"onPressFunc,omitempty"`
}

func (m *StackBarItem) Reset()                    { *m = StackBarItem{} }
func (m *StackBarItem) String() string            { return proto.CompactTextString(m) }
func (*StackBarItem) ProtoMessage()               {}
func (*StackBarItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *StackBarItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StackBarItem) GetStyledTitle() *matcha_text.StyledText {
	if m != nil {
		return m.StyledTitle
	}
	return nil
}

func (m *StackBarItem) GetIcon() *matcha.ImageOrResource {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *StackBarItem) GetIconTint() *matcha.Color {
	if m != nil {
		return m.IconTint
	}
	return nil
}

func (m *StackBarItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *StackBarItem) GetOnPressFunc() string {
	if m != nil {
		return m.OnPressFunc
	}
	return ""
}

type StackEvent struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *StackEvent) Reset()                    { *m = StackEvent{} }
func (m *StackEvent) String() string            { return proto.CompactTextString(m) }
func (*StackEvent) ProtoMessage()               {}
func (*StackEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *StackEvent) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*StackChildView)(nil), "matcha.view.android.StackChildView")
	proto.RegisterType((*StackView)(nil), "matcha.view.android.StackView")
	proto.RegisterType((*StackBar)(nil), "matcha.view.android.StackBar")
	proto.RegisterType((*StackBarItem)(nil), "matcha.view.android.StackBarItem")
	proto.RegisterType((*StackEvent)(nil), "matcha.view.android.StackEvent")
}

func init() {
	proto.RegisterFile("gomatcha.io/matcha/proto/view/android/stackview.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0xba, 0x75, 0xc7, 0x10, 0xd0, 0x82, 0x84, 0x15, 0x71, 0x30, 0x2e, 0x48, 0xe6,
	0x43, 0xb6, 0x54, 0x84, 0x10, 0xa7, 0x0a, 0x57, 0x20, 0x22, 0x81, 0x1a, 0x6d, 0x2a, 0x0e, 0xdc,
	0x6c, 0xef, 0xa8, 0x5d, 0xe1, 0xec, 0xa2, 0xf5, 0xa6, 0x2d, 0x7f, 0x87, 0x9f, 0xc2, 0x7f, 0xe2,
	0x8e, 0x3c, 0x9b, 0x58, 0x29, 0x25, 0x9c, 0xb8, 0x64, 0x33, 0x6f, 0xde, 0x7b, 0xbb, 0xf3, 0x32,
	0x81, 0x57, 0x67, 0x7a, 0x51, 0xd9, 0xe6, 0xbc, 0xca, 0xa5, 0x2e, 0xdc, 0xb7, 0xe2, 0x9b, 0xd1,
	0x56, 0x17, 0x17, 0x12, 0x2f, 0x8b, 0x4a, 0x09, 0xa3, 0xa5, 0x28, 0x3a, 0x5b, 0x35, 0x5f, 0x7b,
	0x24, 0xa7, 0x26, 0xbb, 0xb7, 0x12, 0x11, 0xb4, 0x22, 0x4d, 0x1e, 0x6f, 0xf5, 0x92, 0x8b, 0xea,
	0x0c, 0x9d, 0x74, 0x92, 0x6d, 0x65, 0x59, 0xbc, 0xb2, 0xf4, 0xe1, 0x98, 0xe9, 0x0b, 0x18, 0xcf,
	0xfb, 0x7b, 0x8f, 0xcf, 0x65, 0x2b, 0x3e, 0x4b, 0xbc, 0x64, 0x13, 0x08, 0xbb, 0xc6, 0x20, 0xaa,
	0xa9, 0x88, 0xfd, 0xc4, 0xcb, 0x7c, 0x3e, 0xd4, 0xe9, 0x47, 0xd8, 0x27, 0x36, 0x11, 0x8f, 0x20,
	0x6c, 0x7a, 0x95, 0x41, 0x15, 0x7b, 0x89, 0x9f, 0x45, 0x87, 0x07, 0xf9, 0x5f, 0x9e, 0x9c, 0x5f,
	0xf7, 0xe7, 0x83, 0x28, 0xfd, 0x39, 0x82, 0x90, 0x9a, 0x65, 0x65, 0xd8, 0x7d, 0x08, 0xac, 0xb4,
	0x2d, 0xc6, 0x5e, 0xe2, 0x65, 0xfb, 0xdc, 0x15, 0xec, 0x0d, 0x44, 0x9d, 0xfd, 0xde, 0xa2, 0x38,
	0xa5, 0xde, 0x6e, 0xe2, 0x65, 0xd1, 0xe1, 0x83, 0xf5, 0x35, 0x34, 0xc7, 0xdc, 0xf5, 0xf1, 0xca,
	0xf2, 0x4d, 0x2e, 0xcd, 0xb1, 0xac, 0x9d, 0xa7, 0x4f, 0x9e, 0x43, 0xcd, 0x8e, 0x60, 0xec, 0xa8,
	0xf3, 0x35, 0x63, 0xef, 0xdf, 0xce, 0x7f, 0xd0, 0xd9, 0x01, 0x04, 0x8d, 0x6e, 0xb5, 0x89, 0x77,
	0x48, 0x77, 0x7b, 0xad, 0x3b, 0xee, 0x41, 0xee, 0x7a, 0xec, 0x35, 0x04, 0xd2, 0xe2, 0xa2, 0x8b,
	0x03, 0x4a, 0xe7, 0xd1, 0xf6, 0x74, 0xca, 0xca, 0x4c, 0x2d, 0x2e, 0xb8, 0xe3, 0xb3, 0x67, 0x70,
	0xb7, 0xee, 0xd1, 0xa5, 0xb5, 0x5a, 0x7d, 0x90, 0x42, 0xa0, 0x8a, 0x47, 0x89, 0x97, 0x85, 0xfc,
	0x06, 0x9e, 0xfe, 0xf2, 0xe0, 0xd6, 0xa6, 0xc7, 0xff, 0x0f, 0xf2, 0x39, 0xec, 0xc8, 0x46, 0x2b,
	0x0a, 0x71, 0x43, 0x33, 0xed, 0xf7, 0xed, 0xc4, 0x70, 0xec, 0xf4, 0xd2, 0x34, 0xc8, 0x89, 0xc4,
	0x9e, 0x42, 0xd8, 0x9f, 0xa7, 0x52, 0x59, 0x7a, 0xf2, 0x8d, 0x6c, 0x86, 0x76, 0xff, 0x03, 0x09,
	0xd9, 0x55, 0x75, 0x8b, 0x82, 0x62, 0x0c, 0xf9, 0x50, 0xb3, 0x04, 0x22, 0xad, 0x66, 0x06, 0xbb,
	0xee, 0xfd, 0x52, 0x35, 0x71, 0x40, 0xa3, 0x6c, 0x42, 0xe9, 0x43, 0x00, 0x1a, 0xfb, 0xdd, 0x05,
	0x2a, 0xcb, 0xc6, 0x30, 0x92, 0x82, 0xb6, 0xd0, 0xe7, 0x23, 0x29, 0xca, 0x13, 0x78, 0x22, 0x75,
	0x3e, 0xfc, 0x0b, 0x56, 0x07, 0xad, 0xfc, 0xb5, 0xf8, 0xcb, 0x68, 0x56, 0x0f, 0x1b, 0xfd, 0x65,
	0x6f, 0x85, 0xfe, 0x18, 0xdd, 0xf9, 0x44, 0x8a, 0xb7, 0xae, 0x9e, 0x95, 0xf5, 0x2e, 0x69, 0x5f,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x3a, 0x0d, 0xce, 0xcc, 0x03, 0x00, 0x00,
}
