// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/proto/view/imageview.proto

package view

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha "gomatcha.io/matcha/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImageResizeMode int32

const (
	ImageResizeMode_FIT     ImageResizeMode = 0
	ImageResizeMode_FILL    ImageResizeMode = 1
	ImageResizeMode_STRETCH ImageResizeMode = 2
	ImageResizeMode_CENTER  ImageResizeMode = 3
)

var ImageResizeMode_name = map[int32]string{
	0: "FIT",
	1: "FILL",
	2: "STRETCH",
	3: "CENTER",
}
var ImageResizeMode_value = map[string]int32{
	"FIT":     0,
	"FILL":    1,
	"STRETCH": 2,
	"CENTER":  3,
}

func (x ImageResizeMode) String() string {
	return proto.EnumName(ImageResizeMode_name, int32(x))
}
func (ImageResizeMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type ImageView struct {
	Image      *matcha.ImageOrResource `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	ResizeMode ImageResizeMode         `protobuf:"varint,2,opt,name=resizeMode,enum=matcha.view.ImageResizeMode" json:"resizeMode,omitempty"`
	Tint       *matcha.Color           `protobuf:"bytes,3,opt,name=tint" json:"tint,omitempty"`
	Scale      float64                 `protobuf:"fixed64,5,opt,name=scale" json:"scale,omitempty"`
}

func (m *ImageView) Reset()                    { *m = ImageView{} }
func (m *ImageView) String() string            { return proto.CompactTextString(m) }
func (*ImageView) ProtoMessage()               {}
func (*ImageView) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ImageView) GetImage() *matcha.ImageOrResource {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageView) GetResizeMode() ImageResizeMode {
	if m != nil {
		return m.ResizeMode
	}
	return ImageResizeMode_FIT
}

func (m *ImageView) GetTint() *matcha.Color {
	if m != nil {
		return m.Tint
	}
	return nil
}

func (m *ImageView) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func init() {
	proto.RegisterType((*ImageView)(nil), "matcha.view.ImageView")
	proto.RegisterEnum("matcha.view.ImageResizeMode", ImageResizeMode_name, ImageResizeMode_value)
}

func init() { proto.RegisterFile("gomatcha.io/matcha/proto/view/imageview.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0xcf, 0xcf, 0x4d,
	0x2c, 0x49, 0xce, 0x48, 0xd4, 0xcb, 0xcc, 0xd7, 0x87, 0xb0, 0xf4, 0x0b, 0x8a, 0xf2, 0x4b, 0xf2,
	0xf5, 0xcb, 0x32, 0x53, 0xcb, 0xf5, 0x33, 0x73, 0x13, 0xd3, 0x53, 0x41, 0x2c, 0x3d, 0xb0, 0xa0,
	0x10, 0x37, 0x54, 0x31, 0x48, 0x48, 0x4a, 0x05, 0xa7, 0x5e, 0xb0, 0x36, 0x88, 0x16, 0xa5, 0x8d,
	0x8c, 0x5c, 0x9c, 0x9e, 0x20, 0x7e, 0x58, 0x66, 0x6a, 0xb9, 0x90, 0x2e, 0x17, 0x2b, 0x58, 0x52,
	0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x5c, 0x0f, 0x6a, 0x02, 0x58, 0x85, 0x7f, 0x51, 0x50,
	0x6a, 0x71, 0x7e, 0x69, 0x51, 0x72, 0x6a, 0x10, 0x44, 0x95, 0x90, 0x0d, 0x17, 0x57, 0x51, 0x6a,
	0x71, 0x66, 0x55, 0xaa, 0x6f, 0x7e, 0x4a, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x8c,
	0x1e, 0x92, 0x23, 0x20, 0x1a, 0x83, 0xe0, 0x6a, 0x82, 0x90, 0xd4, 0x0b, 0x29, 0x72, 0xb1, 0x94,
	0x64, 0xe6, 0x95, 0x48, 0x30, 0x83, 0xed, 0xe2, 0x85, 0xe9, 0x73, 0xce, 0xcf, 0xc9, 0x2f, 0x0a,
	0x02, 0x4b, 0x09, 0x89, 0x70, 0xb1, 0x16, 0x27, 0x27, 0xe6, 0xa4, 0x4a, 0xb0, 0x2a, 0x30, 0x6a,
	0x30, 0x06, 0x41, 0x38, 0x5a, 0xb6, 0x5c, 0xfc, 0x68, 0xe6, 0x0a, 0xb1, 0x73, 0x31, 0xbb, 0x79,
	0x86, 0x08, 0x30, 0x08, 0x71, 0x70, 0xb1, 0xb8, 0x79, 0xfa, 0xf8, 0x08, 0x30, 0x0a, 0x71, 0x73,
	0xb1, 0x07, 0x87, 0x04, 0xb9, 0x86, 0x38, 0x7b, 0x08, 0x30, 0x09, 0x71, 0x71, 0xb1, 0x39, 0xbb,
	0xfa, 0x85, 0xb8, 0x06, 0x09, 0x30, 0x3b, 0x39, 0x72, 0xc9, 0x66, 0xe6, 0xeb, 0xc1, 0x43, 0x07,
	0x4a, 0x81, 0x83, 0x03, 0xec, 0x68, 0x27, 0xee, 0x80, 0x24, 0x78, 0x90, 0x44, 0xb1, 0x80, 0x84,
	0x16, 0x31, 0xf1, 0xf8, 0x82, 0x95, 0x81, 0x84, 0x02, 0x9c, 0x92, 0xd8, 0xc0, 0xaa, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xdc, 0x8c, 0x43, 0xa0, 0x01, 0x00, 0x00,
}
