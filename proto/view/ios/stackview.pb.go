// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/proto/view/ios/stackview.proto

package ios

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha "gomatcha.io/matcha/proto"
import matcha_text "gomatcha.io/matcha/proto/text"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StackChildView struct {
	ScreenId int64 `protobuf:"varint,3,opt,name=screenId" json:"screenId,omitempty"`
}

func (m *StackChildView) Reset()                    { *m = StackChildView{} }
func (m *StackChildView) String() string            { return proto.CompactTextString(m) }
func (*StackChildView) ProtoMessage()               {}
func (*StackChildView) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *StackChildView) GetScreenId() int64 {
	if m != nil {
		return m.ScreenId
	}
	return 0
}

type StackView struct {
	Children       []*StackChildView      `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	TitleTextStyle *matcha_text.TextStyle `protobuf:"bytes,2,opt,name=titleTextStyle" json:"titleTextStyle,omitempty"`
	BackTextStyle  *matcha_text.TextStyle `protobuf:"bytes,3,opt,name=backTextStyle" json:"backTextStyle,omitempty"`
	BarColor       *matcha.Color          `protobuf:"bytes,4,opt,name=barColor" json:"barColor,omitempty"`
	ItemColor      *matcha.Color          `protobuf:"bytes,5,opt,name=itemColor" json:"itemColor,omitempty"`
}

func (m *StackView) Reset()                    { *m = StackView{} }
func (m *StackView) String() string            { return proto.CompactTextString(m) }
func (*StackView) ProtoMessage()               {}
func (*StackView) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StackView) GetChildren() []*StackChildView {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *StackView) GetTitleTextStyle() *matcha_text.TextStyle {
	if m != nil {
		return m.TitleTextStyle
	}
	return nil
}

func (m *StackView) GetBackTextStyle() *matcha_text.TextStyle {
	if m != nil {
		return m.BackTextStyle
	}
	return nil
}

func (m *StackView) GetBarColor() *matcha.Color {
	if m != nil {
		return m.BarColor
	}
	return nil
}

func (m *StackView) GetItemColor() *matcha.Color {
	if m != nil {
		return m.ItemColor
	}
	return nil
}

type StackBar struct {
	Title                 string          `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	BackButtonHidden      bool            `protobuf:"varint,7,opt,name=backButtonHidden" json:"backButtonHidden,omitempty"`
	CustomBackButtonTitle bool            `protobuf:"varint,2,opt,name=customBackButtonTitle" json:"customBackButtonTitle,omitempty"`
	BackButtonTitle       string          `protobuf:"bytes,3,opt,name=backButtonTitle" json:"backButtonTitle,omitempty"`
	HasTitleView          bool            `protobuf:"varint,4,opt,name=hasTitleView" json:"hasTitleView,omitempty"`
	RightViewCount        int64           `protobuf:"varint,5,opt,name=rightViewCount" json:"rightViewCount,omitempty"`
	LeftViewCount         int64           `protobuf:"varint,6,opt,name=leftViewCount" json:"leftViewCount,omitempty"`
	RightItems            []*StackBarItem `protobuf:"bytes,8,rep,name=rightItems" json:"rightItems,omitempty"`
	LeftItems             []*StackBarItem `protobuf:"bytes,9,rep,name=leftItems" json:"leftItems,omitempty"`
}

func (m *StackBar) Reset()                    { *m = StackBar{} }
func (m *StackBar) String() string            { return proto.CompactTextString(m) }
func (*StackBar) ProtoMessage()               {}
func (*StackBar) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *StackBar) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StackBar) GetBackButtonHidden() bool {
	if m != nil {
		return m.BackButtonHidden
	}
	return false
}

func (m *StackBar) GetCustomBackButtonTitle() bool {
	if m != nil {
		return m.CustomBackButtonTitle
	}
	return false
}

func (m *StackBar) GetBackButtonTitle() string {
	if m != nil {
		return m.BackButtonTitle
	}
	return ""
}

func (m *StackBar) GetHasTitleView() bool {
	if m != nil {
		return m.HasTitleView
	}
	return false
}

func (m *StackBar) GetRightViewCount() int64 {
	if m != nil {
		return m.RightViewCount
	}
	return 0
}

func (m *StackBar) GetLeftViewCount() int64 {
	if m != nil {
		return m.LeftViewCount
	}
	return 0
}

func (m *StackBar) GetRightItems() []*StackBarItem {
	if m != nil {
		return m.RightItems
	}
	return nil
}

func (m *StackBar) GetLeftItems() []*StackBarItem {
	if m != nil {
		return m.LeftItems
	}
	return nil
}

type StackEvent struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *StackEvent) Reset()                    { *m = StackEvent{} }
func (m *StackEvent) String() string            { return proto.CompactTextString(m) }
func (*StackEvent) ProtoMessage()               {}
func (*StackEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *StackEvent) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type StackBarItem struct {
	Enabled    bool                    `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	TintColor  *matcha.Color           `protobuf:"bytes,4,opt,name=tintColor" json:"tintColor,omitempty"`
	Title      string                  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleStyle *matcha_text.TextStyle  `protobuf:"bytes,5,opt,name=titleStyle" json:"titleStyle,omitempty"`
	Image      *matcha.ImageOrResource `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	TintsImage bool                    `protobuf:"varint,6,opt,name=tintsImage" json:"tintsImage,omitempty"`
	OnPress    string                  `protobuf:"bytes,7,opt,name=onPress" json:"onPress,omitempty"`
}

func (m *StackBarItem) Reset()                    { *m = StackBarItem{} }
func (m *StackBarItem) String() string            { return proto.CompactTextString(m) }
func (*StackBarItem) ProtoMessage()               {}
func (*StackBarItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *StackBarItem) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *StackBarItem) GetTintColor() *matcha.Color {
	if m != nil {
		return m.TintColor
	}
	return nil
}

func (m *StackBarItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StackBarItem) GetTitleStyle() *matcha_text.TextStyle {
	if m != nil {
		return m.TitleStyle
	}
	return nil
}

func (m *StackBarItem) GetImage() *matcha.ImageOrResource {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *StackBarItem) GetTintsImage() bool {
	if m != nil {
		return m.TintsImage
	}
	return false
}

func (m *StackBarItem) GetOnPress() string {
	if m != nil {
		return m.OnPress
	}
	return ""
}

func init() {
	proto.RegisterType((*StackChildView)(nil), "matcha.view.ios.StackChildView")
	proto.RegisterType((*StackView)(nil), "matcha.view.ios.StackView")
	proto.RegisterType((*StackBar)(nil), "matcha.view.ios.StackBar")
	proto.RegisterType((*StackEvent)(nil), "matcha.view.ios.StackEvent")
	proto.RegisterType((*StackBarItem)(nil), "matcha.view.ios.StackBarItem")
}

func init() { proto.RegisterFile("gomatcha.io/matcha/proto/view/ios/stackview.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x96, 0xed, 0x3f, 0xad, 0x7d, 0xd2, 0xa4, 0xbf, 0x46, 0x5c, 0xac, 0x88, 0x4b, 0xb0, 0x2a,
	0x64, 0x6e, 0x89, 0x28, 0x88, 0x4d, 0x81, 0x85, 0x23, 0x24, 0xb2, 0x40, 0x8d, 0x26, 0x15, 0x0b,
	0x76, 0xbe, 0x0c, 0xc9, 0xa8, 0x8e, 0x07, 0xcd, 0x4c, 0xda, 0xf2, 0x0e, 0x3c, 0x01, 0x0b, 0x16,
	0x3c, 0x29, 0x9a, 0xe3, 0xc4, 0x49, 0x4c, 0x12, 0xb1, 0x49, 0xe6, 0x7c, 0x97, 0xe3, 0xe3, 0xf1,
	0x37, 0x03, 0x2f, 0x27, 0x62, 0x16, 0xeb, 0x74, 0x1a, 0xf7, 0xb8, 0xe8, 0x97, 0xab, 0xfe, 0x37,
	0x29, 0xb4, 0xe8, 0x5f, 0x71, 0x76, 0xdd, 0xe7, 0x42, 0xf5, 0x95, 0x8e, 0xd3, 0x4b, 0x53, 0xf5,
	0x90, 0x20, 0xc7, 0x0b, 0x03, 0x42, 0x5c, 0xa8, 0xce, 0xc9, 0xce, 0x1e, 0x7c, 0x16, 0x4f, 0x58,
	0x69, 0xeb, 0x84, 0x3b, 0x55, 0x9a, 0xdd, 0x68, 0xfc, 0x29, 0x95, 0xc1, 0x73, 0x68, 0x8f, 0xcd,
	0x33, 0x07, 0x53, 0x9e, 0x67, 0x9f, 0x39, 0xbb, 0x26, 0x1d, 0x70, 0x55, 0x2a, 0x19, 0x2b, 0x86,
	0x99, 0xef, 0x74, 0xad, 0xd0, 0xa1, 0x55, 0x1d, 0xfc, 0xb2, 0xc1, 0x43, 0x39, 0x2a, 0xcf, 0xc0,
	0x4d, 0x8d, 0x4d, 0xb2, 0xc2, 0xb7, 0xba, 0x4e, 0xd8, 0x3c, 0x7d, 0xd8, 0xab, 0xcd, 0xdb, 0xdb,
	0x6c, 0x4e, 0x2b, 0x03, 0x79, 0x0f, 0x6d, 0xcd, 0x75, 0xce, 0x2e, 0xd8, 0x8d, 0x1e, 0xeb, 0xef,
	0x39, 0xf3, 0xed, 0xae, 0x15, 0x36, 0x4f, 0xef, 0x2c, 0x5b, 0xe0, 0x90, 0x15, 0x4b, 0x6b, 0x6a,
	0xf2, 0x16, 0x5a, 0x49, 0x9c, 0x5e, 0xae, 0xec, 0xce, 0x5e, 0xfb, 0xa6, 0x98, 0x3c, 0x01, 0x37,
	0x89, 0xe5, 0x40, 0xe4, 0x42, 0xfa, 0xff, 0xa1, 0xb1, 0xb5, 0x34, 0x22, 0x48, 0x2b, 0x9a, 0x3c,
	0x03, 0x8f, 0x6b, 0x36, 0x2b, 0xb5, 0x8d, 0x6d, 0xda, 0x15, 0x1f, 0xfc, 0x74, 0xc0, 0xc5, 0x57,
	0x8e, 0x62, 0x49, 0x6e, 0x41, 0x03, 0x87, 0xf6, 0xad, 0xae, 0x15, 0x7a, 0xb4, 0x2c, 0xc8, 0x53,
	0xf8, 0xdf, 0xcc, 0x12, 0xcd, 0xb5, 0x16, 0xc5, 0x47, 0x9e, 0x65, 0xac, 0xf0, 0x0f, 0xbb, 0x56,
	0xe8, 0xd2, 0xbf, 0x70, 0xf2, 0x1a, 0x6e, 0xa7, 0x73, 0xa5, 0xc5, 0x2c, 0xaa, 0x98, 0x0b, 0xec,
	0x68, 0xa3, 0x61, 0x3b, 0x49, 0x42, 0x38, 0x4e, 0x6a, 0x7a, 0x07, 0x27, 0xa8, 0xc3, 0x24, 0x80,
	0xa3, 0x69, 0xac, 0x70, 0x6d, 0x3e, 0x0f, 0x6e, 0x85, 0x4b, 0x37, 0x30, 0xf2, 0x18, 0xda, 0x92,
	0x4f, 0xa6, 0xda, 0x14, 0x03, 0x31, 0x2f, 0x34, 0x6e, 0x82, 0x43, 0x6b, 0x28, 0x39, 0x81, 0x56,
	0xce, 0xbe, 0xae, 0xc9, 0x0e, 0x50, 0xb6, 0x09, 0x92, 0x77, 0x00, 0xe8, 0x1b, 0x6a, 0x36, 0x53,
	0xbe, 0x8b, 0xa9, 0xb9, 0xbf, 0x3d, 0x35, 0x51, 0x2c, 0x8d, 0x8a, 0xae, 0x19, 0xc8, 0x19, 0x78,
	0xa6, 0x5f, 0xe9, 0xf6, 0xfe, 0xc5, 0xbd, 0xd2, 0x07, 0xf7, 0x00, 0x90, 0xfa, 0x70, 0xc5, 0x0a,
	0x4d, 0xda, 0x60, 0xf3, 0x0c, 0x73, 0xeb, 0x50, 0x9b, 0x67, 0xc1, 0x0f, 0x1b, 0x8e, 0xd6, 0x9d,
	0xc4, 0x87, 0x43, 0x56, 0xc4, 0x49, 0xce, 0xca, 0x73, 0xe0, 0xd2, 0x65, 0x69, 0x22, 0xa1, 0x79,
	0xa1, 0xf7, 0xc4, 0x67, 0xc5, 0xef, 0x48, 0xc1, 0x1b, 0x00, 0x5c, 0x94, 0xd9, 0x6d, 0xec, 0xcd,
	0xee, 0x9a, 0x92, 0xbc, 0x80, 0x06, 0x1e, 0xf4, 0xc5, 0x69, 0xb9, 0xbb, 0xb4, 0x0c, 0x0d, 0x78,
	0x2e, 0x29, 0x53, 0x62, 0x2e, 0x53, 0x46, 0x4b, 0x15, 0x79, 0x60, 0x1e, 0x53, 0x68, 0x85, 0x34,
	0x7e, 0x11, 0x97, 0xae, 0x21, 0xe6, 0x1d, 0x45, 0x31, 0x92, 0x4c, 0x29, 0xcc, 0xa0, 0x47, 0x97,
	0x65, 0x34, 0x80, 0x47, 0x5c, 0xf4, 0xaa, 0x7b, 0x64, 0xf1, 0x87, 0x97, 0x46, 0xb5, 0xd3, 0x51,
	0x73, 0x94, 0x54, 0xd7, 0xc1, 0x17, 0x87, 0x0b, 0xf5, 0xdb, 0x6e, 0x7e, 0x42, 0x25, 0x3f, 0x1f,
	0x8f, 0xa2, 0xe4, 0x00, 0xf5, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0x1e, 0xa2, 0xa1,
	0xfa, 0x04, 0x00, 0x00,
}
