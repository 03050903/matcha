// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/pb/view/textinput.proto

package view

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha_text "gomatcha.io/matcha/pb/text"
import matcha_keyboard "gomatcha.io/matcha/pb/keyboard"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TextInput struct {
	StyledText         *matcha_text.StyledText    `protobuf:"bytes,1,opt,name=styledText" json:"styledText,omitempty"`
	PlaceholderText    *matcha_text.StyledText    `protobuf:"bytes,2,opt,name=placeholderText" json:"placeholderText,omitempty"`
	Focused            bool                       `protobuf:"varint,4,opt,name=focused" json:"focused,omitempty"`
	KeyboardType       matcha_keyboard.Type       `protobuf:"varint,5,opt,name=keyboardType,enum=matcha.keyboard.Type" json:"keyboardType,omitempty"`
	KeyboardAppearance matcha_keyboard.Appearance `protobuf:"varint,6,opt,name=keyboardAppearance,enum=matcha.keyboard.Appearance" json:"keyboardAppearance,omitempty"`
	KeyboardReturnType matcha_keyboard.ReturnType `protobuf:"varint,7,opt,name=keyboardReturnType,enum=matcha.keyboard.ReturnType" json:"keyboardReturnType,omitempty"`
	MaxLines           int64                      `protobuf:"varint,8,opt,name=maxLines" json:"maxLines,omitempty"`
	SecureTextEntry    bool                       `protobuf:"varint,9,opt,name=secureTextEntry" json:"secureTextEntry,omitempty"`
}

func (m *TextInput) Reset()                    { *m = TextInput{} }
func (m *TextInput) String() string            { return proto.CompactTextString(m) }
func (*TextInput) ProtoMessage()               {}
func (*TextInput) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *TextInput) GetStyledText() *matcha_text.StyledText {
	if m != nil {
		return m.StyledText
	}
	return nil
}

func (m *TextInput) GetPlaceholderText() *matcha_text.StyledText {
	if m != nil {
		return m.PlaceholderText
	}
	return nil
}

func (m *TextInput) GetFocused() bool {
	if m != nil {
		return m.Focused
	}
	return false
}

func (m *TextInput) GetKeyboardType() matcha_keyboard.Type {
	if m != nil {
		return m.KeyboardType
	}
	return matcha_keyboard.Type_DEFAULT_TYPE
}

func (m *TextInput) GetKeyboardAppearance() matcha_keyboard.Appearance {
	if m != nil {
		return m.KeyboardAppearance
	}
	return matcha_keyboard.Appearance_DEFAULT_APPEARANCE
}

func (m *TextInput) GetKeyboardReturnType() matcha_keyboard.ReturnType {
	if m != nil {
		return m.KeyboardReturnType
	}
	return matcha_keyboard.ReturnType_DEFAULT_RETURN_TYPE
}

func (m *TextInput) GetMaxLines() int64 {
	if m != nil {
		return m.MaxLines
	}
	return 0
}

func (m *TextInput) GetSecureTextEntry() bool {
	if m != nil {
		return m.SecureTextEntry
	}
	return false
}

type TextInputEvent struct {
	StyledText *matcha_text.StyledText `protobuf:"bytes,1,opt,name=styledText" json:"styledText,omitempty"`
}

func (m *TextInputEvent) Reset()                    { *m = TextInputEvent{} }
func (m *TextInputEvent) String() string            { return proto.CompactTextString(m) }
func (*TextInputEvent) ProtoMessage()               {}
func (*TextInputEvent) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *TextInputEvent) GetStyledText() *matcha_text.StyledText {
	if m != nil {
		return m.StyledText
	}
	return nil
}

type TextInputFocusEvent struct {
	Focused bool `protobuf:"varint,1,opt,name=focused" json:"focused,omitempty"`
}

func (m *TextInputFocusEvent) Reset()                    { *m = TextInputFocusEvent{} }
func (m *TextInputFocusEvent) String() string            { return proto.CompactTextString(m) }
func (*TextInputFocusEvent) ProtoMessage()               {}
func (*TextInputFocusEvent) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *TextInputFocusEvent) GetFocused() bool {
	if m != nil {
		return m.Focused
	}
	return false
}

type TextInputSubmitEvent struct {
}

func (m *TextInputSubmitEvent) Reset()                    { *m = TextInputSubmitEvent{} }
func (m *TextInputSubmitEvent) String() string            { return proto.CompactTextString(m) }
func (*TextInputSubmitEvent) ProtoMessage()               {}
func (*TextInputSubmitEvent) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func init() {
	proto.RegisterType((*TextInput)(nil), "matcha.view.TextInput")
	proto.RegisterType((*TextInputEvent)(nil), "matcha.view.TextInputEvent")
	proto.RegisterType((*TextInputFocusEvent)(nil), "matcha.view.TextInputFocusEvent")
	proto.RegisterType((*TextInputSubmitEvent)(nil), "matcha.view.TextInputSubmitEvent")
}

func init() { proto.RegisterFile("gomatcha.io/matcha/pb/view/textinput.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x25, 0x6d, 0x5f, 0x3f, 0xa6, 0xa5, 0x85, 0x79, 0xef, 0x69, 0x88, 0x9b, 0x10, 0x10, 0x82,
	0x60, 0x02, 0x75, 0x21, 0x6e, 0x84, 0x16, 0x2a, 0x14, 0x15, 0x4a, 0x5a, 0x5c, 0xb8, 0xcb, 0xc7,
	0xd5, 0x06, 0xdb, 0xcc, 0x90, 0x4c, 0xda, 0xe6, 0xef, 0xf8, 0x3b, 0xfc, 0x71, 0x32, 0x93, 0x66,
	0xfa, 0x61, 0x74, 0xe1, 0x26, 0x99, 0x7b, 0xef, 0x39, 0x67, 0xee, 0xdc, 0x73, 0xd1, 0xc5, 0x2b,
	0x59, 0xba, 0xcc, 0x9f, 0xbb, 0x56, 0x48, 0xec, 0xfc, 0x64, 0x53, 0xcf, 0x5e, 0x85, 0xb0, 0xb6,
	0x19, 0x6c, 0x58, 0x18, 0xd1, 0x94, 0x59, 0x34, 0x26, 0x8c, 0xe0, 0xf6, 0x16, 0xc9, 0x8b, 0xda,
	0x79, 0x39, 0x91, 0x73, 0xc4, 0x27, 0xe7, 0x68, 0x97, 0xe5, 0xb0, 0x37, 0xc8, 0x3c, 0xe2, 0xc6,
	0x81, 0x3c, 0xe4, 0x70, 0xe3, 0xa3, 0x8a, 0x5a, 0x33, 0xd8, 0xb0, 0x31, 0xbf, 0x16, 0x5f, 0x23,
	0x94, 0xb0, 0x6c, 0x01, 0x01, 0x4f, 0xa9, 0x8a, 0xae, 0x98, 0xed, 0xfe, 0xa9, 0xb5, 0xd5, 0x13,
	0x97, 0x4c, 0x65, 0xd9, 0xd9, 0x83, 0xe2, 0x01, 0xea, 0xd1, 0x85, 0xeb, 0xc3, 0x9c, 0x2c, 0x02,
	0x88, 0x05, 0xbb, 0xf2, 0x33, 0xfb, 0x18, 0x8f, 0x55, 0xd4, 0x78, 0x21, 0x7e, 0x9a, 0x40, 0xa0,
	0xd6, 0x74, 0xc5, 0x6c, 0x3a, 0x45, 0x88, 0x6f, 0x50, 0xa7, 0xe8, 0x7a, 0x96, 0x51, 0x50, 0xff,
	0xe8, 0x8a, 0xd9, 0xed, 0xff, 0x2f, 0x94, 0xe5, 0x8b, 0x78, 0xd1, 0x39, 0x80, 0xe2, 0x7b, 0x84,
	0x8b, 0x78, 0x40, 0x29, 0xb8, 0xb1, 0x1b, 0xf9, 0xa0, 0xd6, 0x85, 0xc0, 0xd9, 0x17, 0x81, 0x1d,
	0xc4, 0x29, 0xa1, 0xed, 0x8b, 0x39, 0xc0, 0xd2, 0x38, 0x12, 0xdd, 0x34, 0xbe, 0x11, 0xdb, 0x41,
	0x9c, 0x12, 0x1a, 0xd6, 0x50, 0x73, 0xe9, 0x6e, 0x1e, 0xc2, 0x08, 0x12, 0xb5, 0xa9, 0x2b, 0x66,
	0xd5, 0x91, 0x31, 0x36, 0x51, 0x2f, 0x01, 0x3f, 0x8d, 0x81, 0x0f, 0x66, 0x14, 0xb1, 0x38, 0x53,
	0x5b, 0x62, 0x24, 0xc7, 0x69, 0x63, 0x8c, 0xba, 0xd2, 0xbd, 0xd1, 0x0a, 0xa2, 0xdf, 0x5b, 0x68,
	0xd8, 0xe8, 0xaf, 0x94, 0xba, 0xe3, 0x93, 0xcf, 0xf5, 0xf6, 0x6c, 0x51, 0x0e, 0x6c, 0x31, 0x4e,
	0xd0, 0x3f, 0x49, 0x98, 0xa6, 0xde, 0x32, 0xcc, 0x3b, 0x18, 0xde, 0x22, 0x2d, 0x24, 0x96, 0x5c,
	0xc3, 0xed, 0x8f, 0x7a, 0x62, 0x8d, 0x87, 0xed, 0x89, 0x27, 0x59, 0xcf, 0x35, 0x9e, 0x7a, 0xaf,
	0x74, 0x1e, 0x05, 0xe6, 0x29, 0x84, 0xf5, 0x64, 0xe8, 0xd5, 0xc5, 0x66, 0x5e, 0x7d, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x34, 0x08, 0xcf, 0x62, 0x2a, 0x03, 0x00, 0x00,
}
