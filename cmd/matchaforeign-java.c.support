#include "matchaforeign.h"
#include "matchaforeign-java.h"
#include <jni.h>
#include <android/log.h>

JNIEnv *sEnv;
jobject sBridge;
jobject sTracker;

#define printf(...) __android_log_print(ANDROID_LOG_DEBUG, "TAG", __VA_ARGS__);

ObjcRef MatchaObjcBridge_() {
    printf("MatchaObjcBridge, %p", sBridge);
    // jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "track", "(Ljava/lang/Object;)J");
    // return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

ObjcRef MatchaObjcBool(bool v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignBool", "(Z)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

bool MatchaObjcToBool(ObjcRef v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignToBool", "(J)Z");
    return (*sEnv)->CallBooleanMethod(sEnv, sTracker, mid, v);
}

ObjcRef MatchaObjcInt64(int64_t v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignInt64", "(J)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

int64_t MatchaObjcToInt64(ObjcRef v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignToInt64", "(J)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

ObjcRef MatchaObjcFloat64(double v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignFloat64", "(D)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

double MatchaObjcToFloat64(ObjcRef v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignToFloat64", "(J)D");
    return (*sEnv)->CallDoubleMethod(sEnv, sTracker, mid, v);
}

ObjcRef MatchaObjcGoRef(GoRef v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignGoRef", "(J)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

GoRef MatchaObjcToGoRef(ObjcRef v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "foreignToGoRef", "(J)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

ObjcRef MatchaObjcString(CGoBuffer str) {
    return 0;
}

CGoBuffer MatchaObjcToString(ObjcRef v) {
    CGoBuffer buf = {};
    return buf;
}

ObjcRef MatchaObjcBytes(CGoBuffer bytes) {
    return 0;
}

CGoBuffer MatchaObjcToBytes(ObjcRef v) {
    CGoBuffer buf = {};
    return buf;
}

ObjcRef MatchaObjcArray() {
    return 0;
}

int64_t MatchaObjcArrayLen(ObjcRef v) {
    return 0;
}

void MatchaObjcArrayAppend(ObjcRef v, ObjcRef a) {
}

ObjcRef MatchaObjcArrayAt(ObjcRef v, int64_t index) {
    return 0;
}

// Call
ObjcRef MatchaObjcCallSentinel() {
    return 0;
}

ObjcRef MatchaObjcCall(ObjcRef v, CGoBuffer str, ObjcRef args) {
    
    
    return 0;
}

// Tracker
ObjcRef MatchaTrackObjc(jobject v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "track", "(Ljava/lang/Object;)J");
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

// id MatchaGetObjc(ObjcRef key) {
// }

void MatchaUntrackObjc(ObjcRef key) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "untrack", "(J)V");
    (*sEnv)->CallVoidMethod(sEnv, sTracker, mid);
}
