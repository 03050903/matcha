#include "matchaforeign.h"
#include "matchaforeign-java.h"
#include <jni.h>

ObjcRef MatchaObjcBridge_() {
    return MatchaTrackObjc(sBridge);
}

ObjcRef MatchaObjcBool(bool v) {
    return 0;
}

bool MatchaObjcToBool(ObjcRef v) {
    return false;
}

ObjcRef MatchaObjcInt64(int64_t v) {
    return 0;
}

int64_t MatchaObjcToInt64(ObjcRef v) {
    return 0;
}

ObjcRef MatchaObjcFloat64(double v) {
    return 0;
}

double MatchaObjcToFloat64(ObjcRef v) {
    return 0;
}

ObjcRef MatchaObjcGoRef(GoRef v) {
    return 0;
}

GoRef MatchaObjcToGoRef(ObjcRef v) {
    return 0;
}

ObjcRef MatchaObjcString(CGoBuffer str) {
    return 0;
}

CGoBuffer MatchaObjcToString(ObjcRef v) {
    CGoBuffer buf = {};
    return buf;
}

ObjcRef MatchaObjcBytes(CGoBuffer bytes) {
    return 0;
}

CGoBuffer MatchaObjcToBytes(ObjcRef v) {
    CGoBuffer buf = {};
    return buf;
}

ObjcRef MatchaObjcArray() {
    return 0;
}

int64_t MatchaObjcArrayLen(ObjcRef v) {
    return 0;
}

void MatchaObjcArrayAppend(ObjcRef v, ObjcRef a) {
}

ObjcRef MatchaObjcArrayAt(ObjcRef v, int64_t index) {
    return 0;
}

// Call
ObjcRef MatchaObjcCallSentinel() {
    return 0;
}

ObjcRef MatchaObjcCall(ObjcRef v, CGoBuffer str, ObjcRef args) {
    return 0;
}

// Tracker
ObjcRef MatchaTrackObjc(jobject v) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "track", "(Ljava/lang/Object;)J");
    if (mid == 0) {
        // TODO(KD): Panic?
    }
    return (*sEnv)->CallLongMethod(sEnv, sTracker, mid, v);
}

// id MatchaGetObjc(ObjcRef key) {
// }

void MatchaUntrackObjc(ObjcRef key) {
    jclass cls = (*sEnv)->GetObjectClass(sEnv, sTracker);
    jmethodID mid = (*sEnv)->GetMethodID(sEnv, cls, "untrack", "(J)V");
    if (mid == 0) {
        // TODO(KD): Panic?
    }
    (*sEnv)->CallVoidMethod(sEnv, sTracker, mid);
}
